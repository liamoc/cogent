--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

-- last field overloaded for Break type too
type FindFreeInoAcc = (ExState, FsState, U32)
type FindFreeInoBrk = R (U32, U32, Ext2GroupDescriptor, OSBuffer) ()

find_free_inode_in_blockgroups: Seq32_body FindFreeInoAcc () FindFreeInoBrk
find_free_inode_in_blockgroups #{acc = (ex, state, group), obsv, idx} = 
    let ((ex, state), gd) = group_desc_and_buf_from_block_group (ex, state, group)
    in gd
    | Success (group_desc, group_buf) ->
        let (ex, res) = ext2_get_block (ex, group_desc.inode_bitmap) !group_desc
        in res
        | Success (bitmap_buf) =>
            let ipg = state.super.inodes_per_group !state
            and ino = osbuffer_find_next_zero_bit (bitmap_buf, ipg, 0) !bitmap_buf !state

            in if ino >= ipg then
                -- search the next block group (see race msg on ialloc.c:471)
                let group = group + 1
                and beyond_group_limit = (group == state.group_count) !state

                and ((ex, state), res) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                and ex = osbuffer_destroy (ex, bitmap_buf)

                in if beyond_group_limit then
                    ((ex, state, 0), Iterate ())
                else
                    ((ex, state, group), Iterate ())
            else
                -- would normally try to lock this group, and retry this group
                -- if the lock failed - FIXME when implementing concurrency

                -- anyway: WE FOUND ONE! 
                let (bitmap_buf, _) = osbuffer_set_bit (bitmap_buf, ino)
                and (ex, bitmap_buf) = osbuffer_dirty (ex, bitmap_buf)
                and ex = osbuffer_destroy (ex, bitmap_buf)
                in ((ex, state, group), Break (Success (ino, group, group_desc, group_buf)))
        | Error () ->
            let ((ex, state), res) = put_group_desc_buf_in_array (ex, state, group, group_buf)
            in ((ex, state, group), Break (Error ()))
    | Error () ->
        ((ex, state, group), Break (Error ()))

ext2_inode_init_owner: (ExState, VfsInode, VfsInode!, U32) -> (ExState, VfsInode, U32)
ext2_inode_init_owner(ex, inode, parent, mode) =
    let inode = vfs_inode_set_uid (inode, os_get_current_fsuid (ex)) !ex
    and was_gid = vfs_inode_get_mode (parent) .&. s_ISGID !parent
    in if was_gid /= 0 then
        let inode = vfs_inode_set_gid (inode, vfs_inode_get_gid (parent)) !ex
        in if vmode_is_dir (mode) then
            (ex, inode, mode .|. s_ISGID)
        else
            (ex, inode, mode)
    else
        let inode = vfs_inode_set_gid (inode, os_get_current_fsgid (ex)) !ex
        in (ex, inode, mode)

ext2_inode_create3: (ExState, FsState, VfsInode) -> RR (ExState, FsState) VfsInode U32
ext2_inode_create3 (ex, state, inode) =
    -- update super's inode, free inode counters
    let state_t { super, super_buf } = state
    and super_free_inode_count' = super.free_inode_count - 1 !super

    and super = super { free_inode_count = super_free_inode_count' }
    and (ex, super_buf) = super_set_free_inode_count (ex, super_buf, super_free_inode_count')

    and state = state_t { super, super_buf }

    in vfs_inode_insert (#{ex, inode})
    | Success (ex, inode) ->
        let (ex, inode) = vfs_inode_mark_dirty (ex, inode)
        and (ex, state) = readahead_inode (ex, state, inode) !inode
        in ((ex, state), Success inode)
    | Error (ex, inode) ->
        let ex = vfs_inode_bad (#{ex, inode})
        and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, ("failed to insert\n"))
        in ((ex, state), Error eIO)

ext2_inode_create2: (ExState, FsState, VfsInode!, VfsMode, U32) -> RR (ExState, FsState) (VfsInode) (U32)
ext2_inode_create2 (ex, state, parent_inode, mode, group) =
    -- search inode bitmap in all group descriptors from `group' onwards
    let num_groups =  state.group_count !state
    and ((ex, state, group), res) = seq32 [FindFreeInoAcc, (), FindFreeInoBrk]
    #{
        frm = 0,
        to = num_groups,
        step = 1,
        f = find_free_inode_in_blockgroups,
        acc = (ex, state, group),
        obsv = ()
    } 
    in res
    | Break maybe_success ->
        maybe_success
        | Success (ino, group, group_desc, group_buf) ->
            -- got one at ino
            let ino = ino + group * state.super.inodes_per_group + 1 !state
            and inode_count = state.super.inode_count !state 
            --and first_ino = state.super.first_ino !state -- FIXME: when we have a bigger superblock
            and first_ino = 2
            in if ino > first_ino && ino <= inode_count then
                wordarray_create [U32] (ex, const_numBlockPointers)
                | Success (ex, block_pointers) ->
                    vfs_inode_new ex
                    | Success (ex, inode_t) ->
                        let mem_inode = #{
                            block_pointers, 
                            dir_start_lookup = 0,
                            dtime = 0
                        }

                        and inode = inode_t { fs = mem_inode }

                        and inode = vfs_inode_set_ino    (inode, ino)

                        and inode = vfs_inode_set_nlink  (inode, 1)

                        and inode = vfs_inode_set_size   (inode, 0)
                        and inode = vfs_inode_set_blocks (inode, 0)
                        and inode = vfs_inode_set_bytes  (inode, 0)

                        and (ex, now) = os_get_current_time (ex)
                        and inode = vfs_inode_set_mtime  (inode, now)
                        and inode = vfs_inode_set_ctime  (inode, now)
                        and inode = vfs_inode_set_atime  (inode, now)

                        and (ex, inode, mode) = ext2_inode_init_owner (ex, inode, parent_inode, mode)
                        and inode = vfs_inode_set_mode   (inode, mode)
                        
                        and inode = vfs_inode_set_flags  (inode, vfs_inode_get_flags (parent_inode))

                        -- update block group inode counter
                        and group_free_inode_count' = group_desc.free_inode_count - 1 !group_desc
                        and (ex, group_buf) = group_desc_set_free_inode_count (ex, group, group_buf, group_free_inode_count')
                        --and (ex, group_buf) = osbuffer_dirty (ex, group_buf) (done by above)

                        in if vmode_is_dir (mode) then 
                            let group_directory_count' = group_desc.directory_count + 1 !group_desc
                            and (ex, group_buf) = group_desc_set_directory_count (ex, group, group_buf, group_directory_count')
                            and ((ex, state), res) = put_group_desc_buf_in_array (ex, state, group, group_buf)

                            in ext2_inode_create3 (ex, state, inode)
                        else
                            let ((ex, state), res) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                            in ext2_inode_create3 (ex, state, inode)
                    | Error (ex) ->
                        let ex = wordarray_free [U32] (ex, block_pointers)
                        and ((ex, state), res) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                        in ((ex, state), Error eNoMem)
                | Error (ex) ->
                    let ((ex, state), res) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                    in ((ex, state), Error eNoMem)
            else
                -- reserved or outside count
                let _ = _cogent_warn ("ext2_inode_create2: ERROR: inode ")
                and _ = _cogent_warn_u32 (ino)
                and _ = _cogent_warn (" is reserved or outside count\n")
                
                and ((ex, state), res) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                in ((ex, state), Error eIO)
        | Error _ ->
            -- failed to read something, or ino == 0, which is invalid
            let _ = _cogent_log (dbg_EXT2_INODE_ALLOC, ("ext2_inode_create2: ERROR: find_free_inode_in_blockgroups stopped (probably IO)\n"))
            in ((ex, state), Error eIO)
    | Iterate () ->
        -- scanned all blockgroups, without finding a free ino
        let _ = _cogent_log (dbg_EXT2_INODE_ALLOC, ("ext2_inode_create2: ERROR: no free ino in all block groups\n"))
        in ((ex, state), Error eNoSpc)

type AboveAverageBlockAcc = (ExState, FsState, U32, U16)

above_average_blockgroup: Seq32_body AboveAverageBlockAcc U32 ()
above_average_blockgroup #{ acc = (ex, state, best_group, best_free_blocks), obsv = avg_free_inodes, idx = group } =
    let ((ex, state), res) = group_desc_from_block_group (ex, state, group)
    in res
    | Success group_desc =>
        let group_desc_t { free_inode_count = this_free_inodes, free_block_count = this_free_blocks } = group_desc
        -- FIXME: remove cast

        and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "\tgroup desc ")
        and _ = _cogent_log_u32 (dbg_EXT2_INODE_ALLOC, group)
        and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, " => ")
        and _ = _cogent_log_u16 (dbg_EXT2_INODE_ALLOC, this_free_inodes)
        and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, " free inodes, ")
        and _ = _cogent_log_u16 (dbg_EXT2_INODE_ALLOC, this_free_blocks)
        and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, " free blocks; ")

        and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "cur best free blocks = ")
        and _ = _cogent_log_u16 (dbg_EXT2_INODE_ALLOC, best_free_blocks)
        and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "\n")

        and was_better = this_free_inodes > 0 && upcast this_free_inodes >= avg_free_inodes && (this_free_blocks > best_free_blocks || best_group == 0)
        in if was_better then
            let _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "\t** found new best **\n")
            in ((ex, state, group, this_free_blocks), Iterate ())
        else
            ((ex, state, best_group, best_free_blocks), Iterate ())
    | Error _ ->
        ((ex, state, best_group, best_free_blocks), Iterate ())

-- linear search and find one that has above average free space
find_group_dir: (ExState, FsState, VfsInode!) -> RR (ExState, FsState) (U32) ()
find_group_dir (ex, state, parent) =
    let ngroups = state.group_count !state
    and avg_free_inodes = (state.super.free_inode_count / ngroups) !state

    and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "find_group_dir: there are ")
    and _ = _cogent_log_u32 (dbg_EXT2_INODE_ALLOC, ngroups)
    and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, " groups, and initial avg. free inodes = ")
    and _ = _cogent_log_u32 (dbg_EXT2_INODE_ALLOC, avg_free_inodes)
    and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "\n")

    and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "find_group_dir: looping over groups to find one with above avg. free...\n")

    and ((ex, state, best_group, best_free_blocks), res) = seq32 [AboveAverageBlockAcc, U32, ()] #{
        frm  = 0,
        to   = ngroups,
        step = 1,
        f    = above_average_blockgroup,
        acc  = (ex, state, 0, 0),
        obsv = avg_free_inodes }

    and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "find_group_dir: best group = ")
    and _ = _cogent_log_u32 (dbg_EXT2_INODE_ALLOC, best_group)
    and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "; best free blocks = ")
    and _ = _cogent_log_u16 (dbg_EXT2_INODE_ALLOC, best_free_blocks)
    and _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "\n")

    and had_free_blocks = best_free_blocks /= 0
    in had_free_blocks
    | True => ((ex, state), Success best_group)
    | _ ->
        let _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "find_group_dir: ERROR: 'best blockgroup' had 0 free blocks!\n")
        in ((ex, state), Error ())

type FreeBlockHashAcc = (ExState, FsState, U32)
type FreeBlockLinearAcc = FreeBlockHashAcc

free_block_hash_body: Seq32_body FreeBlockHashAcc U32 ()
free_block_hash_body #{acc = (ex, state, group), obsv = ngroups, idx} = 
    let group = group + idx
    and group = if group >= ngroups then group - ngroups else group
    and ((ex, state), gd) = group_desc_from_block_group (ex, state, group)
    in gd
    | Success (desc) ->
        if desc.free_inode_count /= 0 && desc.free_block_count /= 0 then
            ((ex, state, group), Break ())
        else
            ((ex, state, group), Iterate ())
    | Error () ->
        -- shug it off, try the next one
        ((ex, state, group), Iterate ())

free_block_linear_body: Seq32_body FreeBlockLinearAcc U32 ()
free_block_linear_body #{acc = (ex, state, group), obsv = ngroups, idx} = 
    let group = group + 1
    and group = if group >= ngroups then 0 else group
    and ((ex, state), gd) =  group_desc_from_block_group (ex, state, group)
    in gd
    | Success (desc) ->
        if desc.free_inode_count /= 0 then
            ((ex, state, group), Break ())
        else
            ((ex, state, group), Iterate ())
    | Error () ->
        -- shug it off, try the next one
        ((ex, state, group), Iterate ())

find_group_other3: (ExState, FsState, U32, U32) -> RR (ExState, FsState) (U32) ()
find_group_other3 (ex, state, parent_group, ngroups) =
    -- that failed; try linear search for a free inode, even if that group has
    -- no free blocks.

    let group = parent_group
    and ((ex, state, group), res) = seq32 [FreeBlockLinearAcc, U32, ()]
    #{
        frm  = 0,
        to   = ngroups,
        step = 1,
        f    = free_block_linear_body,
        acc  = (ex, state, group),
        obsv = (ngroups)
    }
    in res
    | Break () -> ((ex, state), Success (group))
    | Iterate () -> ((ex, state), Error ()) -- no more space left for an inode!

find_group_other2: (ExState, FsState, VfsInode!, U32) -> RR (ExState, FsState) (U32) ()
find_group_other2 (ex, state, parent, group) =
    -- we're going to place this inode in a different blockgroup from its parent
    -- we want to cause files in a common direcory to all land in the same block
    -- group.
    -- 
    -- but we want files which are in a different directory but shares
    -- a blockgroup with our parent to land in a different blockgroup.
    --
    -- so, add our directory's ino into the starting point for the hash

    let ngroups = state.group_count !state
    and parent_group = (group + vfs_inode_get_ino (parent)) % ngroups !parent
    and group = parent_group

    -- use a quadratic hash to find a group with a free inode and some free blocks
    and ((ex, state, group), res) = seq32_stepf [FreeBlockHashAcc, U32, ()]
    #{
        frm   = 1,
        to    = ngroups,
        stepf = shift_left, -- i miss my lambda expressions :(
        f     = free_block_hash_body,
        acc   = (ex, state, group),
        obsv  = ngroups
    }
    in res
    | Break () ->
        ((ex, state), Success group)
    | Iterate () ->
        find_group_other3 (ex, state, parent_group, ngroups)

find_group_other: (ExState, FsState, VfsInode!) -> RR (ExState, FsState) U32 ()
find_group_other (ex, state, parent) =
    -- try to place in parent directory
    let group = get_block_group_from_ino2 (state, vfs_inode_get_ino parent) !parent !state   -- FIXME: linux puts this in the inode struct itself
    and ((ex, state), gd) =  group_desc_from_block_group (ex, state, group)
    in gd
    | Success (desc) ->
        if desc.free_inode_count /= 0 && desc.free_block_count /= 0 then
            ((ex, state), Success group)
        else
            find_group_other2 (ex, state, parent, group)
    | Error () ->
        find_group_other2 (ex, state, parent, group)


ext2_inode_create: (ExState, FsState, VfsInode!, VfsMode) -> RR (ExState, FsState) (VfsInode) (U32)
ext2_inode_create (ex, state, parent_inode, mode) =
    if vmode_is_dir mode then
        let _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "ext2_inode_create: was dir, using directory allocator to find goal group\n")
        and ((ex, state), res) = find_group_dir (ex, state, parent_inode)
        --let ((ex, state), res) = find_group_other (ex, state, parent_inode)
        in res
        | Success group ->
            ext2_inode_create2 (ex, state, parent_inode, mode, group)
        | Error () ->
            let _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "ext2_inode_create: no goal group, reporting eNoSpc\n")
            in ((ex, state), Error eNoSpc)
    else 
        let _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "ext2_inode_create: was NOT dir, using 'other' allocator to find goal group\n")
        and ((ex, state), res) = find_group_other (ex, state, parent_inode)
        in res
        | Success (group) ->
            ext2_inode_create2 (ex, state, parent_inode, mode, group)
        | Error () ->
            let _ = _cogent_log (dbg_EXT2_INODE_ALLOC, "ext2_inode_create: no goal group, reporting eNoSpc\n")
            in ((ex, state), Error eNoSpc)

-- this function only used from console for testing
fsop_inode_create: #{ex: ExState, state: FsState, parent_inode: VfsInode!, mode: VfsMode} -> RR #{ex: ExState, state: FsState} VfsInode U32
fsop_inode_create #{ex, state, parent_inode, mode} = 
    let ((ex, state), res) = ext2_inode_create (ex, state, parent_inode, mode)
    in (#{ex, state}, res)

fsop_inode_mknod: (ExState, FsState, VfsInode, CString!, VfsMode, #VfsDevice) -> RR (ExState, FsState, VfsInode) VfsInode U32
fsop_inode_mknod (ex, state, dir, name, mode, device) =
    let ((ex, state), res) = ext2_inode_create (ex, state, dir, mode) !dir
    in res
    | Success inode =>
        let inode = vfs_inode_link_device (inode, mode, device)
        and (ex, inode) = vfs_inode_mark_dirty (ex, inode)
        and ((ex, state, dir), res) = ext2_dir_add (ex, state, dir, inode, name) !inode
        and inode = vfs_inode_unlock_new (inode)
        in res
        | Success () =>
            ((ex, state, dir), Success inode)
        | Error e ->
            -- free the old one
            let inode = vfs_inode_make_bad inode

            and ex = vfs_inode_put #{ ex, inode }
            in ((ex, state, dir), Error e)
    | Error e -> ((ex, state, dir), Error e)
