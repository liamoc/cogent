--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

type Ext2Inode = {
    mode                : U16,
    uid_low             : U16,
    size                : U32,
    access_time         : U32,
    creation_time       : U32,
    modified_time       : U32,
    deletion_time       : U32,        
    gid_low             : U16,
    link_count          : U16,
    num_physical_blocks : U32,   -- this is NOT ext2 blocks, but 512-byte blocks
    flags               : U32,

    --_ : Ple32,         -- reserved; translator flag on hurd

    block_pointers      : WordArray U32
    --generation          : U32,   -- used for NFS file version

    --aclFile             : U32,
    --aclDirectory        : U32,

    --fragmentAddress     : U32,
    --fragmentNumber      : U8,
    --fragmentSize        : U8,
}

type FsState = {
    super                  : Ext2Superblock,
    super_buf              : OSBuffer,
    superblock_num         : U32,
    group_count            : U32,
    inode_tables_per_group : U32,
    flags                  : U32,
    cur_overhead           : U32,

    group_desc_array       : Array OSBuffer,

    -- preallocated objects used during block lookup
    --
    -- these are Option types to avoid having to deal with multiple variations
    -- of FsState with different prealloc objects taken or put.
    -- 
    -- however, you obviously end up with having to match on whether or not
    -- the object exists and handle the error case accordingly -- which sucks.
    --
    prealloc_offsets    : Option (WordArray BlockOffset),   -- for Path
    prealloc_indirects  : Option (Array Indirect),          -- for Chain
    prealloc_chain      : Option (Chain take (..)),
    prealloc_blockptrs  : Option (WordArray BlockPtr)       -- for block allocation
}

-- this is the in-memory representation
type FsInode = {
    --num_physical_blocks : U32,
    block_pointers      : WordArray BlockPtr,
    dir_start_lookup    : U64,
    dtime               : U32
}

malloc_FsState: ExState -> RR ExState (FsState take (..)) ()
free_FsState: (ExState, FsState take (..)) -> ExState

--malloc_Ext2DirEnt: (ExState) -> Result (ExState, Ext2DirEnt take (..)) (ExState)
--free_Ext2DirEnt: (ExState, Ext2DirEnt take (..)) -> ExState

const_defaultSuperblock : U32
const_defaultSuperblock = 1

const_blockSize : U32
const_blockSize = 1024

const_maxIndexPathSize : U32
const_maxIndexPathSize = 4

const_blockSizeBits : U32
--const_blockSizeBits = cogent_log2 (const_blockSize)
const_blockSizeBits = 10

const_ext2Magic: U16
const_ext2Magic = 0xEF53

const_ext2LinkMax: U32
const_ext2LinkMax = 32000

const_ext2MaxRecLen: U16
const_ext2MaxRecLen = ((1 << 16) - 1)

const_sizeof_Ext2Superblock: U32
const_sizeof_Ext2Superblock = 1024

const_sizeof_Ext2GroupDescriptor: U32
const_sizeof_Ext2GroupDescriptor = 32

const_descPerBlock: U32
--const_descPerBlock = const_blockSize / const_sizeof_Ext2GroupDescriptor
const_descPerBlock = 32

const_descPerBlockBits: U32
--const_descPerBlockBits = cogent_log2 (const_descPerBlock)
const_descPerBlockBits = 5

const_addrPerBlock: U32
--const_addrPerBlock = const_blockSize / 4
const_addrPerBlock = 256

const_addrPerBlockBits: U32
--const_addrPerBlockBits = cogent_log2 (addr_per_block)
const_addrPerBlockBits = 8

const_sizeof_Inode: U32
const_sizeof_Inode = 128

const_singleIndirectIdx: U32
const_singleIndirectIdx = 12

const_doubleIndirectIdx: U32
const_doubleIndirectIdx = 13

const_tripleIndirectIdx: U32
const_tripleIndirectIdx = 14

const_numDirectBlocks: U32
const_numDirectBlocks = 12

const_numBlockPointers: U32
const_numBlockPointers = 15

const_maxNameLen: U32
const_maxNameLen = 255

optFlag_oldAlloc: U32
optFlag_oldAlloc = 1

ext2_dir_inode_ops: VfsInodeOperations
ext2_dir_inode_ops = #{
    create      = Some fsop_dir_create,
    --lookup      = Some fsop_dir_lookup,
    can_lookup  = True,
    link        = Some fsop_dir_link,
    unlink      = Some fsop_dir_unlink,
    symlink     = None (), -- Some fsop_dir_symlink,
    --mkdir       = Some fsop_dir_mkdir,
    can_mkdir   = True,
    rmdir       = Some fsop_dir_rmdir,
    rename      = Some fsop_rename,
    mknod       = Some fsop_inode_mknod,
    readlink    = None (),
    followlink  = None (),
    putlink     = None (),
    setattr     = Some vfs_default_setattr
}

ext2_dir_file_ops: VfsFileOperations
ext2_dir_file_ops = #{
    iterate     = Some fsop_dir_iterate,
    llseek      = Some vfs_default_llseek,
    open        = None (),
    mmap        = None (),
    fsync       = Some vfs_default_fsync,
    read        = Some vfs_default_read_dir,
    write       = None ()
}

ext2_reg_inode_ops: VfsInodeOperations
ext2_reg_inode_ops = #{
    create      = None (),
    can_lookup  = False,
    link        = None (),
    unlink      = None (),
    symlink     = None (),
    --mkdir       = None (),
    can_mkdir   = False,
    rmdir       = None (),
    rename      = None (),
    mknod       = None (),
    readlink    = None (),
    followlink  = None (),
    putlink     = None (),
    setattr     = Some vfs_default_setattr
}

ext2_reg_file_ops: VfsFileOperations
ext2_reg_file_ops = #{
    iterate     = None (),
    llseek      = Some vfs_default_llseek,
    open        = Some vfs_default_open,
    mmap        = Some vfs_default_mmap,
    fsync       = Some vfs_default_fsync,
    read        = Some vfs_default_read,
    write       = Some vfs_default_write
}

-- From ext2/super.c:
--
-- Maximal file size.  There is a direct, and {,double-,triple-}indirect
-- block limit, and also a limit of (2^32 - 1) 512-byte sectors in i_blocks.
-- We need to be 1 filesystem block less than the 2^32 sector limit.
ext2_max_size: U64 -> U64
ext2_max_size bits = 
  let res = upcast const_numDirectBlocks
  and upper_limit = (1 << 32) - 1
  -- total blocks in fs block size
  and upper_limit = upper_limit >> (bits - 9) 
  -- indirect blocks
  and meta_blocks = 1
  -- double indirect blocks
  and meta_blocks = meta_blocks + 1 + (1 << (bits - 2))
  -- triple indirect blocks
  and meta_blocks = meta_blocks + 1 + (1 << (bits - 2)) + (1 << (2 * (bits - 2)))

  and upper_limit = upper_limit - meta_blocks
  and upper_limit = upper_limit << bits
  and res = res + (1 << (bits - 2))
  and res = res + (1 << (2 * (bits - 2)))
  and res = res + (1 << (3 * (bits - 2)))
  and res = res << bits
  in if res > upper_limit
       then upper_limit
       else if res > os_MAX_FILESIZE
         then os_MAX_FILESIZE
         else res

give_extinfo: (ExState, FsState, VfsExtendedInfo take (..)) -> (ExState, FsState, VfsExtendedInfo)
give_extinfo (ex, state, info_t) =
  let blocks_total = upcast state.super.block_count - upcast state.cur_overhead !state
  and blocks_free  = upcast state.super.free_block_count !state

  and info = info_t { 
        fs_type = upcast const_ext2Magic,
        best_blocksize = upcast const_blockSize,

        blocks_total,
        blocks_free,
        blocks_available = blocks_free,  -- ignore reserved blocks (TODO: include them in count)

        files_total = upcast state.super.inode_count,
        files_free  = upcast state.super.free_inode_count,

        max_namelen = upcast const_maxNameLen
      } !state

  in (ex, state, info)

fsop_get_extended_info: (ExState, FsState, VfsExtendedInfo take (..)) -> (ExState, FsState, VfsExtendedInfo)
fsop_get_extended_info (ex, state, info_t) =
  -- calculate overhead if not done before, since it's constant on blockgroup count
  --
  -- NB: if number of block groups change, ie we support online resize, then
  -- this must be recalculated
  let cur_overhead = state.cur_overhead !state
  in if cur_overhead > 0
       then give_extinfo (ex, state, info_t)
       else  -- TODO: actually calculate it using algorithm below
         let cur_overhead : U32 = 1
         and state = state { cur_overhead }
         in give_extinfo (ex, state, info_t)

-- ext2/super.c  "ext2_statfs"
--        overhead = le32_to_cpu(es->s_first_data_block);

--        /*
--         * Add the overhead attributed to the superblock and
--         * block group descriptors.  If the sparse superblocks
--         * feature is turned on, then not all groups have this.
--         */
--        for (i = 0; i < sbi->s_groups_count; i++)
--                overhead += ext2_bg_has_super(sb, i) +
--                        ext2_bg_num_gdb(sb, i);

--        /*
--         * Every block group has an inode bitmap, a block
--         * bitmap, and an inode table.
--         */
--        overhead += (sbi->s_groups_count *
--                     (2 + sbi->s_itb_per_group));
--        sbi->s_overhead_last = overhead;
--        smp_wmb();
--        sbi->s_blocks_last = le32_to_cpu(es->s_blocks_count);
