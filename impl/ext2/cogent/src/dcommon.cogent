--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

type Ext2DirEnt = #{
    inode               : U32,
    record_length       : U16,

    -- FIXME: ext2 v1+ has file_type as lower half of name_length
    name_length         : U8, -- FIXME: should go?
    file_type           : U8,
    name                : WordArray U8
}

-- we always pad dir ents RECORDS to groups of 4
-- the string size remains the same
const_EXT2_DIR_PAD: U16
const_EXT2_DIR_PAD = 4

const_EXT2_DIR_ROUND: U16
const_EXT2_DIR_ROUND = const_EXT2_DIR_PAD - 1

-- ext2.h: 622
ext2_dir_rec_len: (U16) -> U16
ext2_dir_rec_len (name_len) =
    ((name_len) + 8 + const_EXT2_DIR_ROUND) .&. complement const_EXT2_DIR_ROUND

-- for 64KB block sizes
ext2_rec_len_from_disk: (U16) -> U16
ext2_rec_len_from_disk (dlen) =
    if (dlen >= const_ext2MaxRecLen) then
        const_ext2MaxRecLen
    else
        dlen

ext2_last_byte: (VfsInode!, U64) -> U64
ext2_last_byte (inode, page_nr) = 
    let last_byte = vfs_inode_get_size (inode)
    and last_byte = last_byte - (page_nr << os_PAGE_CACHE_SHIFT)
    in if last_byte > os_PAGE_CACHE_SIZE then
        os_PAGE_CACHE_SIZE
    else
        last_byte

ext2_dir_pages: (VfsInode!) -> U64
ext2_dir_pages (inode) = 
    (vfs_inode_get_size (inode) + os_PAGE_CACHE_SIZE - 1) >> os_PAGE_CACHE_SHIFT

ext2_match: (CString!, Ext2DirEnt!) -> Bool
ext2_match (c_name, dirent) =
    dirent.inode /= 0 && wordarray_cmp (c_name, dirent.name)


destroy_Ext2DirEnt: (ExState, Ext2DirEnt) -> ExState
destroy_Ext2DirEnt (ex, dirent) = 
    let dirent_t { name } = dirent
    and ex = wordarray_free [U8] (ex, name)
    in ex

-- NOTE: ignores name_length
serialise_Ext2DirEnt: (ExState, Ext2DirEnt!, OSPageBuffer, U32) -> RR (ExState, OSPageBuffer, U32) () ()
serialise_Ext2DirEnt (ex, de, page, idx) =
    ospagebuffer_serialise_Ple32 (page, idx, de.inode)
    | Success (buf, idx) ->
        ospagebuffer_serialise_Ple16 (buf, idx, de.record_length)
        | Success (buf, idx) ->
            -- FIXME: ensure size?
            ospagebuffer_serialise_U8 (buf, idx, u32_to_u8 (wordarray_length[U8] de.name))
            | Success (buf, idx) ->
                ospagebuffer_serialise_U8 (buf, idx, de.file_type)
                | Success (buf, idx) ->
                    wordarray_fold[U8, (OSPageBuffer, U32), (), (OSPageBuffer, U32)] (#{
                        arr  = de.name,
                        frm  = 0,
                        to   = wordarray_length[U8] de.name,
                        f    = ospagebuffer_serialise_U8_WordArray,
                        acc  = (buf, idx),
                        obsv = ()})
                    | Iterate (buf, idx) -> ((ex, buf, idx), Success ())
                    | Break (buf, idx) -> ((ex, buf, idx), Error ())
                | Error (buf) -> ((ex, buf, idx), Error ())
            | Error (buf) -> ((ex, buf, idx), Error ())
        | Error (buf) -> ((ex, buf, idx), Error ())
    | Error (buf) -> ((ex, buf, idx), Error ())

serialise_Ext2DirEnt2: (ExState, VfsInode!, U16, CString!, U8, OSPageBuffer, U32) -> RR (ExState, OSPageBuffer, U32) () ()
serialise_Ext2DirEnt2 (ex, inode, reclen, name, namelen, page, idx) =
    ospagebuffer_serialise_Ple32 (page, idx, vfs_inode_get_ino (inode))
    | Success (buf, idx) ->
        ospagebuffer_serialise_Ple16 (buf, idx, reclen)
        | Success (buf, idx) ->
            ospagebuffer_serialise_U8 (buf, idx, namelen)
            | Success (buf, idx) ->
                -- FIXME: set file type in dirent
                ospagebuffer_serialise_U8 (buf, idx, 0)
                | Success (buf, idx) ->
                    wordarray_fold[U8, (OSPageBuffer, U32), (), (OSPageBuffer, U32)] (#{
                        arr  = name,
                        frm  = 0,
                        to   = wordarray_length[U8] name,
                        f    = ospagebuffer_serialise_U8_WordArray,
                        acc  = (buf, idx),
                        obsv = ()})
                    | Iterate (buf, idx) -> ((ex, buf, idx), Success ())
                    | Break (buf, idx) -> ((ex, buf, idx), Error ())
                | Error (buf) -> ((ex, buf, idx), Error ())
            | Error (buf) -> ((ex, buf, idx), Error ())
        | Error (buf) -> ((ex, buf, idx), Error ())
    | Error (buf) -> ((ex, buf, idx), Error ())

-- for use with pages:
deserialise_Ext2DirEnt2: (ExState, OSPageBuffer!, U32) -> RR (ExState) (Ext2DirEnt, U32) ()
deserialise_Ext2DirEnt2 (ex, buf, idx) =
    ospagebuffer_deserialise_Ple32 (buf, idx)
    | Success (inode, idx) ->
        ospagebuffer_deserialise_Ple16 (buf, idx)
        | Success (record_length, idx) ->
            ospagebuffer_deserialise_U8 (buf, idx)
            | Success (name_length, idx) ->
                ospagebuffer_deserialise_U8 (buf, idx)
                | Success (file_type, idx) ->
                    wordarray_create_nz[U8] (ex, upcast name_length)
                    | Success (ex, name) ->
                        let ((name, idx), res) = wordarray_map[U8, U32, OSPageBuffer!, ()] (#{
                            arr = name,
                            frm = 0,
                            to = upcast name_length,
                            f = ospagebuffer_deserialise_U8_WordArray,
                            acc = idx,
                            obsv = buf})
                        in res
                        | Iterate () ->
                            let obj = #{ inode, record_length, name_length, file_type, name }
                            in (ex, Success (obj, idx))
                        | Break () ->
                            let ex = wordarray_free [U8] (ex, name)
                            in (ex, Error ())
                    | Error (ex) -> (ex, Error ())
                | Error () -> (ex, Error ())
            | Error () -> (ex, Error ())
        | Error () -> (ex, Error ())
    | Error () -> (ex, Error ())
