--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

maxChainSize: U32
maxChainSize = 4

type IndirectIdx = U32

-- if you're reading the Linux source code, branch = filled chain
-- TODO: may need to divorce path and indirects?
type Chain = {
  path: Path,
  indirects: Array Indirect,
  indirect_count: U32
}

------------------------------------------------------------------------------
-- chain stack operations
------------------------------------------------------------------------------

chain_push_indirect: (ExState, Chain, Indirect) -> (ExState, Chain)
chain_push_indirect (ex, chain, indirect) =
  let depth = chain.indirect_count !chain
  and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_push_indirect: blockptr=")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, indirect.blockptr) !indirect
  and _ = _cogent_log (dbg_EXT2_CHAIN, " offset=")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, indirect.offset) !indirect
  and _ = _cogent_log (dbg_EXT2_CHAIN, " @ depth ")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, depth)
  and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

  and (ex, chain) = chain_put_indirect (ex, chain, indirect, depth)

  and chain = chain { indirect_count = depth + 1 }
  in (ex, chain)

chain_put_indirect: (ExState, Chain, Indirect, Depth) -> (ExState, Chain)
chain_put_indirect (ex, chain, indirect, depth) =
  let chain_t { indirects } = chain
  and ic = chain_t.indirect_count !chain_t
  and _ = _cogent_assert2 ("chain_put_indirect: depth < ic", True)
  and ((ex, indirects), _) = array_replace[Indirect] #{ arr = indirects, idx = depth, elem = indirect, f = indirect_destroy2, ex }
  and chain = chain_t { indirects }
  in if depth >= ic
     then
        let chain = chain { indirect_count = depth + 1 }
	in (ex, chain)
     else
	(ex, chain)

chain_get_indirect_blockptr2: ArrayUseValueF Indirect BlockPtr ()
chain_get_indirect_blockptr2 #{ elem = indirect, acc = blockptr, obsv } = indirect.blockptr

chain_get_indirect_blockptr: (Chain!, Depth) -> (BlockPtr)
chain_get_indirect_blockptr (chain, depth) =
  let _ = _cogent_assert (depth < chain.indirect_count)
  and blockptr:U32 = 0

  and blockptr = array_use_value [Indirect, BlockPtr, ()] #{
    arr  = chain.indirects,
    idx  = depth,
    f    = chain_get_indirect_blockptr2,
    acc  = blockptr,
    obsv = () }

  in blockptr

chain_set_indirect_blockptr: (ExState, Chain, Depth, BlockPtr) -> (ExState, Chain)
chain_set_indirect_blockptr (ex, chain, depth, ptr) =
  let _ = _cogent_assert2 ("chain_set_indirect_blockptr (1): depth < chain.indirect_count", True) !chain
  and (chain, maybe_indirect) = chain_take_indirect (chain, depth)  -- we have checked depth is in bound in this func call
  and _ = _cogent_assert2 ("chain_set_indirect_blockptr (2): depth < chain.indirect_count", True) !chain
  in maybe_indirect
  | Some indirect =>
      let indirect = indirect { blockptr = ptr }
      -- it's guaranteed in this case the old indirects[depth] is empty
      and (ex, chain) = chain_put_indirect (ex, chain, indirect, depth)
      in (ex, chain)
  | None () -> (ex, chain)

chain_dirty_buffer_inode2: ArrayUseValueF Indirect VfsInode ()
chain_dirty_buffer_inode2 #{ elem = indirect, acc = inode, obsv } =
  indirect.buf
  | Some buf => vfs_inode_add_dirty_osbuffer (inode, buf)
  | None () -> inode

chain_dirty_buffer_inode: (ExState, Chain!, Depth, VfsInode) -> (ExState, VfsInode)
chain_dirty_buffer_inode (ex, chain, depth, inode) =
  let _ = _cogent_assert (depth < chain.indirect_count) !chain

  and inode = array_use_value [Indirect, VfsInode, ()] #{
    arr  = chain.indirects,
    idx  = depth,
    f    = chain_dirty_buffer_inode2,
    acc  = inode,
    obsv = () }

  in (ex, inode)

chain_peek_indirect_blockptr: (Chain!) -> (BlockPtr)
chain_peek_indirect_blockptr chain = chain_get_indirect_blockptr (chain, chain.indirect_count - 1)

chain_take_indirect: (Chain, Depth) -> (Chain, Option Indirect)
chain_take_indirect (chain, depth) =
  let _ = _cogent_assert (depth < chain.indirect_count) !chain

  and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_take_indirect: taking from idx ")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, depth)
  and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

  and chain_t { indirects } = chain
  and _ = _cogent_assert (depth < array_length [Indirect] indirects) !indirects
  and (indirects, maybe_obj) = array_remove [Indirect] (indirects, depth)
  in (chain_t { indirects }, maybe_obj)

chain_pop_indirect: Chain -> (Chain, Option Indirect, U32)
chain_pop_indirect chain = 
  let idx = chain.indirect_count - 1 !chain
  and _ = _cogent_assert (idx >= 0)

  and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_pop_indirect: popping from idx ")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, idx)
  and _ = _cogent_log (dbg_EXT2_CHAIN, " (next chain_take_indirect is from us)\n")

  and (chain, maybe_indirect) = chain_take_indirect (chain, idx)
  and chain = chain { indirect_count = idx }

  in (chain, maybe_indirect, idx)

malloc_Chain: ExState -> RR ExState (Chain take (..)) ()
free_Chain: (ExState, Chain take (..)) -> ExState


--chain_was_full: (Chain!, U32) -> Bool
--chain_was_full (chain, partial) = partial == chain.path.depth

------------------------------------------------------------------------------
-- building a chain from a list of offsets, and a starting block pointer
------------------------------------------------------------------------------

type FillChainAcc = (ExState, Chain, LogicalBlock)

chain_init: (FsState, Path) -> (FsState, R Chain Path)
chain_init (state, path) = 
  let state { prealloc_chain, prealloc_indirects } = state
  in prealloc_chain
  | Some chain_t =>
    prealloc_indirects
    | Some indirects =>
      let chain = chain_t { path, indirects, indirect_count = 0 }
      and state = state { prealloc_chain = None (), prealloc_indirects = None () } -- put None instead, REMEMBER TO PUT BACK LATER
      in (state, Success chain)
    | None () ->
      let state = state { prealloc_chain = Some chain_t, prealloc_indirects = None () }
      in (state, Error path)
  | None () ->
    let state = state { prealloc_chain = None (), prealloc_indirects }
    in (state, Error path)

chain_restore: (ExState, FsState, Chain) -> (ExState, FsState, Path)
chain_restore (ex, state, chain) = 
  let chain_t { path, indirects } = chain
  and state_t { prealloc_chain, prealloc_indirects } = state

  -- free old ones if there
  and ex = free_option_chain (ex, prealloc_chain)
  and ex = free_option_indirects (ex, prealloc_indirects)

  -- TODO: clear current indirects array
  and state = state_t { prealloc_chain = Some chain_t, prealloc_indirects = Some indirects }

  in (ex, state, path)


--chain_destroy_emergency: (ExState, Chain) -> ExState
--chain_destroy_emergency (ex, chain) = path_destroy (chain_free (ex, chain))

--chain_free_emergency: (ExState, Chain) -> (ExState, Path, Array Indirect)
--chain_free (ex, chain) = 
--  let chain_t { .. } = chain
--  and ex = free_chain (ex, chain_t)
--  in (ex, path, indirects)

-- note: this does NOT read the final block
-- however, its LogicalBlock is placed in the Chain for you to read from disk
chain_from_path: (ExState, Chain, VfsInode!, Depth) -> RR (ExState, Chain) (Option IndirectIdx) ()
chain_from_path (ex, chain, inode, depth) =
  -- create empty chain
  let _ = _cogent_assert (depth <= chain.path.depth) !chain

  and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_from_path: path has depth ")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, chain.path.depth) !chain
  and _ = _cogent_log (dbg_EXT2_CHAIN, ", using passed-in depth ")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, depth)
  and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

  -- add first inode offset to chain
  and ((ex, chain), res) = indirect_from_inode (ex, chain, inode, 0) !inode
  in res
  | Success indirect =>
    let lastptr = indirect.blockptr !indirect
    and have_blk = lastptr /= 0

    and (ex, chain) = chain_push_indirect (ex, chain, indirect)
    in if have_blk then
      -- loop over the rest of the offsets, if there were any
      let _ = _cogent_log (dbg_EXT2_CHAIN, "chain_from_path: had non-zero block, going to try and follow indirects...\n")
      and ((ex, chain, _), res) = seq32[FillChainAcc, (), R U32 U32] #{
        frm  = 0,
        to   = depth - 1,
        step = 1,
        f    = chain_follow_indirects,
        acc  = (ex, chain, lastptr),
        obsv = ()}

      in res
      | Iterate () -> ((ex, chain), (Success (None ())))
      | Break res ->
        res
        | Success idx => ((ex, chain), Success (Some (1 + idx)))
        | Error err -> ((ex, chain), Error ())
    else
      let _ = _cogent_log (dbg_EXT2_CHAIN, "chain_from_path: breaking, blockptr == 0\n")
      in ((ex, chain), (Success (Some 0))) -- no initial block ptr
  | Error () ->
    let _ = _cogent_log (dbg_EXT2_CHAIN, "chain_from_path: ERROR: failed to alloc indirect from inode\n")
    in ((ex, chain), Error ())

chain_follow_indirects: Seq32_body FillChainAcc () (R U32 U32)
chain_follow_indirects #{acc = (ex, chain, lastptr), obsv = (), idx} = 
  let offset = wordarray_get [BlockOffset] (chain.path.offsets, idx + 1) !chain
  and buf_offset = offset * 4 -- sizeof (u32)

  and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_follow_indirects: used offset ")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, offset)
  and _ = _cogent_log (dbg_EXT2_CHAIN, " and lastptr ")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, lastptr)
  and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

  and (ex, res) = ext2_get_block (ex, lastptr)
  in res
  | Success buffer ->
    -- find out the next pointer at the offset
    osbuffer_deserialise_Ple32 (buffer, buf_offset) !buffer
    | Success (newptr, _) ->
      -- create an indirect
      let (ex, chain, res) = indirect_from_chain (ex, chain, idx + 1)
      in res
      | Some indirect_t =>
        let somebuf : Option OSBuffer = Some buffer
        and indirect = indirect_t { blockptr = newptr, buf = somebuf, offset }
        and (ex, chain) = chain_push_indirect (ex, chain, indirect)

        -- keep following chain if next block exists
        in if newptr /= 0 then
          ((ex, chain, newptr), Iterate ())
        else
          let _ = _cogent_log (dbg_EXT2_CHAIN, ("chain_follow_indirects: breaking; had missing/unallocated block at depth "))
          and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, (idx))
          and _ = _cogent_log (dbg_EXT2_CHAIN, ("\n"))

          in ((ex, chain, newptr), Break (Success idx)) -- missing/unallocated block
      | None () ->
        let ex = osbuffer_destroy (ex, buffer)
        and _ = _cogent_log (dbg_EXT2_CHAIN, ("chain_follow_indirects: ERROR: no memory\n"))
        in ((ex, chain, newptr), Break (Error eNoMem)) -- no memory
    | _ ->
      let ex = osbuffer_destroy (ex, buffer)
      and _ = _cogent_log (dbg_EXT2_CHAIN, ("chain_follow_indirects: ERROR: failed to deser\n"))
      in ((ex, chain, lastptr), Break (Error eIO)) -- osbuffer_deserialise_Ple32
  | _ ->
    let _ = _cogent_log (dbg_EXT2_CHAIN, ("chain_follow_indirects: ERROR: failed to get block\n"))
    in ((ex, chain, lastptr), Break (Error eIO)) -- invalid offset


------------------------------------------------------------------------------
-- checking how many blocks are contiguous in a chain
------------------------------------------------------------------------------

type CheckContiguousObsv = (Chain!, VfsInode!, (Option OSBuffer)!, U32, U32)

chain_count_contiguous: (ExState, Chain, VfsInode!, U32, U32) -> (ExState, Chain, U32)
chain_count_contiguous (ex, chain, inode, max_mappable, boundary) =
  let limit = min_u32 (max_mappable, boundary + 1)
  and last_offset = path_peek_offset (chain.path) !chain
  and (chain, maybe_last_indirect, last_idx) = chain_pop_indirect chain -- take indirect temporarily
  in maybe_last_indirect
  | Some last_indirect =>
    let (contiguous, _) = seq32 [U32, CheckContiguousObsv, ()] #{
      frm  = 0,
      to   = limit,
      step = 1,
      f    = chain_count_contiguous2,
      acc  = 0,
      obsv = (chain, inode, last_indirect.buf, last_indirect.blockptr, last_offset) } !chain !last_indirect

    and (ex, chain) = chain_put_indirect (ex, chain, last_indirect, last_idx) -- put indirect back
    in (ex, chain, contiguous)
  | None () ->
    let _ = _cogent_assert2 ("chain_count_contiguous: no indirects", True)
    in (ex, chain, 0)

chain_count_contiguous2: Seq32_body U32 CheckContiguousObsv ()
chain_count_contiguous2 #{ acc = contiguous, obsv = (chain, inode, maybe_buffer, last_ptr, last_offset), idx } =
  maybe_buffer
  | Some buffer ->
    -- last ptr was from a buffer; look inside that
    osbuffer_deserialise_Ple32 (buffer, (last_offset + idx) * 4)
    | Success (ptr', _) ->
      if ptr' == last_ptr + idx then
        (contiguous + 1, Iterate ())
      else
        (contiguous, Break ())
    | Error () ->
      (contiguous, Break ())
  | None () ->
    -- last ptr was from inode
    let ptr' = wordarray_get[BlockPtr] (inode.fs.block_pointers, last_offset + idx)
    in if ptr' == last_ptr + idx then
      (contiguous + 1, Iterate ())
    else
      (contiguous, Break ())

------------------------------------------------------------------------------
-- calculates blocks needed to allocate to get to a particular logical block
------------------------------------------------------------------------------

type BlocksToAllocateObsv = (U64, U32, Chain)

-- returns total number of blocks needed to allocate, including direct and indirect
chain_blocks_to_allocate: (Chain!, U32, U64, U32) -> U64
chain_blocks_to_allocate (chain, indirect, blocks, boundary) = 
  if indirect > 0 then
    if blocks < upcast boundary + 1 then
      blocks
    else
      upcast boundary + 1
  else
    -- count zero'd blocks down to (incl) boundary
    let count:U64 = 1
    and bound = min_u64 (blocks, upcast boundary + 1)
    and (count, _) = seq64 [U64, BlocksToAllocateObsv, ()] #{
      frm  = count,
      to   = bound,
      step = 1,
      f    = chain_blocks_to_allocate2,
      acc  = count,
      obsv = (blocks, boundary, chain)
    }

    in count

chain_blocks_to_allocate2: Seq64_body U64 BlocksToAllocateObsv ()
chain_blocks_to_allocate2 #{acc = count, obsv = (blocks, boundary, chain), idx} =
  if count < blocks && 
     count <= upcast boundary &&
     chain_get_indirect_blockptr (chain, u64_to_u32 count) == 0 then
    (count + 1, Iterate)
  else
    (count, Break)

------------------------------------------------------------------------------
-- allocates a given number of indirect and direct inodes for a chain
------------------------------------------------------------------------------

type ChainAllocIndirectAcc = (ExState, Chain, VfsInode)
type ChainAllocIndirectObsv = (U32, U32, WordArray BlockPtr, IndirectIdx)

-- branch == use partial idx from Chain
-- offsets == offsets in Chain, starting at partial
-- num == number of blocks to alloc
--
-- allocate and setup all n blocks in a chain
-- fills same purpose as ext2_alloc_branch in linux
chain_alloc: (ExState, FsState, Chain, VfsInode, U32, BlockPtr, U32, IndirectIdx) -> RR (ExState, FsState, Chain, VfsInode) U32 U32
chain_alloc (ex, state, chain, inode, num_indirect, goal, num_blocks, partial_idx) =
  -- TODO: there is an opportunity to reuse memory here
  let state_t { prealloc_blockptrs } = state
  and state = state_t { prealloc_blockptrs = None () }

  in prealloc_blockptrs
  | Some new_blockptrs =>
    let _ = _cogent_log (dbg_EXT2_CHAIN, "chain_alloc: trying to allocate ")
    and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, num_blocks)
    and _ = _cogent_log (dbg_EXT2_CHAIN, " blocks with goal ")
    and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, goal)
    and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

    and ((ex, state, inode, new_blockptrs), res) = ext2_alloc_blocks (ex, state, inode, new_blockptrs, num_indirect, goal, num_blocks)
    in res
    | Success num =>
      -- copy first level to chain
      let toplevel_new_blockptr = wordarray_get [BlockPtr] (new_blockptrs, 0) !new_blockptrs

      and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_alloc: setting indirect blockptr @ ")
      and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, partial_idx) !chain
      and _ = _cogent_log (dbg_EXT2_CHAIN, " in chain to top-level just-allocated blockptr ")
      and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, toplevel_new_blockptr)
      and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

      and (ex, chain) = chain_set_indirect_blockptr (ex, chain, partial_idx, toplevel_new_blockptr)

      -- allocate all other blocks to goal
      and ((ex, chain, inode), res) = seq32[ChainAllocIndirectAcc, ChainAllocIndirectObsv, U32] #{
        frm  = 1,
        to   = num_indirect + 1, -- inclusive
        step = 1,
        f    = chain_alloc_connect_indirects,
        acc  = (ex, chain, inode),
        obsv = (num, num_indirect, new_blockptrs, partial_idx) } !new_blockptrs

      and state_t { prealloc_blockptrs } = state
      -- free whatever was in there before (should be nothing)
      and ex = free_option_wordarray (ex, prealloc_blockptrs)

      and state = state_t { prealloc_blockptrs = Some new_blockptrs }

      in res
      | Iterate () => ((ex, state, chain, inode), Success num) -- success
      | Break e -> ((ex, state, chain, inode), Error e) -- error writing other blocks to goal
    | Error e ->
      let state_t { prealloc_blockptrs } = state
      -- free whatever was in there before (should be nothing)
      and ex = free_option_wordarray (ex, prealloc_blockptrs)

      and state = state_t { prealloc_blockptrs = Some new_blockptrs }

      and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_alloc: ERROR: underlying block allocation failed completely with code ")
      and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, e)
      and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

      in ((ex, state, chain, inode), Error e) -- underlying block allocation failed completely

  | None () ->
    let _ = _cogent_log (dbg_EXT2_CHAIN, "chain_alloc: ERROR: cannot allocate blockptr array\n")
    in ((ex, state, chain, inode), Error eNoMem) -- cannot allocate blockptr array

-- chain should already have ptrs allocated
-- get parent, memset it, and point it forward to child
-- UPDATES THE CHAIN WITH NEW INDIRECTS!! (in 2nd part)
chain_alloc_connect_indirects: Seq32_body ChainAllocIndirectAcc ChainAllocIndirectObsv U32
chain_alloc_connect_indirects #{ acc = (ex, chain, inode), obsv = (num, num_indirect, new_blockptrs, partial_idx), idx } =
  let parent_blockptr = wordarray_get[BlockPtr] (new_blockptrs, idx - 1) -- this is `key'; recall, idx begins at 1

  and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_alloc_connect_indirects: have parent_blockptr ")
  and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, parent_blockptr)
  and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

  and (ex, res) = ext2_get_block (ex, parent_blockptr)

  in res
  | Success parent_buf =>
    -- clear the block
    let parent_buf = osbuffer_memset (parent_buf, 0, 0, const_blockSize)

    -- work out where to update
    and offset = wordarray_get [BlockOffset] (chain.path.offsets, partial_idx + idx) !chain
    and buf_offset = offset * 4 -- sizeof (u32) ; this is `p'

    and blockptr = wordarray_get[BlockPtr] (new_blockptrs, idx)

    and _ = _cogent_log (dbg_EXT2_CHAIN, "chain_alloc_connect_indirects: pointing to ")
    and _ = _cogent_log_u32 (dbg_EXT2_CHAIN, blockptr)
    and _ = _cogent_log (dbg_EXT2_CHAIN, "\n")

    -- update ptr in buffer
    in osbuffer_serialise_Ple32 (parent_buf, buf_offset, blockptr)
    | Success (parent_buf, _) =>
      if idx == num_indirect then 
        let _ = _cogent_log (dbg_EXT2_CHAIN, "chain_alloc_connect_indirects: end of chain, rest is blocks\n")

        -- end of chain; rest is just a chunk of blocks (inode.c:512)
        and ((parent_buf, _), _) = seq32 [(OSBuffer, U32), U32, ()] #{
          frm  = 1,
          to   = num,
          step = 1,
          f    = write_data_blockptr_many,
          acc  = (parent_buf, blockptr),
          obsv = (buf_offset) }

        in chain_alloc_connect_indirects2 (ex, chain, inode, blockptr, idx, parent_buf, offset, partial_idx)
      else
        chain_alloc_connect_indirects2 (ex, chain, inode, blockptr, idx, parent_buf, offset, partial_idx)

    | Error parent_buf ->
      let ex = osbuffer_trash (ex, parent_buf)
      and _ = _cogent_warn ("chain_alloc_connect_indirects: ERROR: serialise failed\n")
      in ((ex, chain, inode), Break eIO)
  | Error () ->
    let _ = _cogent_warn "chain_alloc_connect_indirects: ERROR: getblock for block "
    and _ = _cogent_warn_u32 parent_blockptr
    and _ = _cogent_warn " failed\n"

    in ((ex, chain, inode), Break eIO)

write_data_blockptr_many: Seq32_body (OSBuffer, U32) U32 ()
write_data_blockptr_many #{ acc = (parent_buf, current_block), obsv = buf_offset, idx } = 
  let buf_offset = buf_offset + (idx * 4)
  in osbuffer_serialise_Ple32 (parent_buf, buf_offset, current_block)
  | Success (parent_buf, _) =>
    ((parent_buf, current_block + 1), Iterate ())
  | Error parent_buf ->
    ((parent_buf, current_block + 1), Break ())

-- setting up indirects from alloc_branch (inode.c:500)
chain_alloc_connect_indirects2: (ExState, Chain, VfsInode, BlockPtr, U32, OSBuffer, U32, U32) -> LRR (ExState, Chain, VfsInode) U32
chain_alloc_connect_indirects2 (ex, chain, inode, blockptr, idx, parent_buf, offset, partial_idx) =
  -- we mark uptodate because then we say it's all zero'd?
    let (ex, parent_buf) = osbuffer_set_uptodate (ex, parent_buf)

    -- associate this buffer with inode for fsync
    and inode = vfs_inode_add_dirty_osbuffer (inode, parent_buf) !parent_buf

    -- sync if now if required
    and was_dir = vmode_is_dir (vfs_inode_get_mode (inode)) !inode
    and is_sync_dir = vfs_inode_is_sync_dir (inode) !inode
    and parent_buf = if was_dir && is_sync_dir then osbuffer_sync_dirty (parent_buf) else parent_buf

    and indirect_idx = partial_idx + idx

    and (ex, chain, res) = indirect_from_chain (ex, chain, indirect_idx)
    in res
    | Some indirect_t =>
      -- put it all in the chain
      let somebuf : Option OSBuffer = Some parent_buf

      and indirect = indirect_t { blockptr = blockptr, buf = somebuf, offset }

      and (ex, chain) = chain_put_indirect (ex, chain, indirect, indirect_idx)

      in ((ex, chain, inode), Iterate ())
    | None () ->
      -- TODO: could allocate here as plan B, but hey..
      let _ = _cogent_log (dbg_EXT2_CHAIN, "chain_alloc_connect_indirects2: could not alloc indirect; no memory\n")
      and ex = osbuffer_destroy (ex, parent_buf)
      in ((ex, chain, inode), Break eNoMem)

------------------------------------------------------------------------------
-- handles truncation with regards to block chains
------------------------------------------------------------------------------

find_deepest_offset_block: Seq32_body U32 (WordArray BlockOffset) ()
find_deepest_offset_block #{ acc = depth, obsv = offsets, idx } =
  if wordarray_get[BlockOffset] (offsets, idx - 1) /= 0 then
    (idx, Break ())
  else
    ((idx - 1), Iterate ())

indirect_was_all_zeroes: ArrayUseValueF Indirect Bool ()
indirect_was_all_zeroes #{ elem = indirect, acc, obsv } =
  indirect.buf
  | Some buf => osbuffer_all_zeroes (buf, 0, indirect.offset * 4)
  | None () -> False -- should not happen

find_first_non_hole_branch: Seq32_body U32 Chain ()
find_first_non_hole_branch #{ acc = partial, obsv = chain, idx } =
  let was_all_zeroes = array_use_value [Indirect, Bool, ()] #{
    arr  = chain.indirects,
    idx  = partial - 1,
    f    = indirect_was_all_zeroes,
    acc  = False,
    obsv = () }
  in if was_all_zeroes then
    ((idx - 1), Iterate ())
  else
    (idx, Break ())

chain_find_shared_cleanup2: Seq32_body (ExState, Chain) () ()
chain_find_shared_cleanup2 #{ acc = (ex, chain), obsv = (), idx = _ } =
  let (chain, maybe_indirect, idx) = chain_pop_indirect chain
  in maybe_indirect
  | Some indirect =>
    let (ex, chain) = indirect_restore (ex, chain, indirect, idx)
    in ((ex, chain), Iterate ())
  | None () -> ((ex, chain), Iterate ())

chain_find_shared_cleanup: (ExState, VfsInode, Chain, U32, U32, BlockPtr) -> RR (ExState, VfsInode, Chain) (BlockPtr, IndirectIdx) ()
chain_find_shared_cleanup (ex, inode, chain, p, partial, top) = 
  -- keep popping until partial == p
  let ((ex, chain), _) = seq32_rev [(ExState, Chain), (), ()] #{
    frm   = p,
    to    = partial,
    step  = 1,
    f     = chain_find_shared_cleanup2,
    acc   = (ex, chain),
    obsv  = ()
  }

  in ((ex, inode, chain), Success (top, partial))

-- k is depth
chain_find_shared_partial_helper: (Option IndirectIdx, U32) -> IndirectIdx
chain_find_shared_partial_helper (maybe_indirect, k) =
  maybe_indirect
  | Some indirect -> indirect
  | None () -> k - 1

chain_find_shared: (ExState, VfsInode, Chain) -> RR (ExState, VfsInode, Chain) (BlockPtr, IndirectIdx) ()
chain_find_shared (ex, inode, chain) =
  -- look to find the deepest node that has an offset that is non-zero
  -- ie a blockptr that isn't located at the beginning of the indirect
  --
  -- (if it's zero, then we can take the whole branch -- nothing to the right -- otherwise it's partial)
  let (k, _) = seq32_rev [U32, WordArray BlockOffset, ()] #{
    frm   = chain.path.depth,
    to    = 1,
    step  = 1,
    f     = find_deepest_offset_block,
    acc   = chain.path.depth,
    obsv  = chain.path.offsets
  } !chain

  and ((ex, chain), res) = chain_from_path (ex, chain, inode, k) !inode
  in res
  | Success (maybe_partial) =>
    let partial = chain_find_shared_partial_helper (maybe_partial, k)

    -- check if from the start of the indirect to the current branch pos
    -- we're all zero? if so, we can kill this whole chain level (it has holes,
    -- and there's nothing to the left of it on this level)
    and (p, _) = seq32_rev [U32, Chain, ()] #{
      frm   = partial,
      to    = 1, -- enforces p > 0 in loop invariant
      step  = 1,
      f     = find_first_non_hole_branch,
      acc   = partial,
      obsv  = chain
    } !chain

    -- at this point, we now know which is the last block to keep
    in if p == partial && p > 0 !chain then
      -- if we're still keeping this branch around (ie it's a partial / we updated p in
      -- the loop above) and we don't grow directly from the inode, then rather than
      -- detaching this level, we can just keep the bits before it in the indirect instead
      let prev_blockptr = chain_get_indirect_blockptr (chain, p) !chain
      and (ex, chain) = chain_set_indirect_blockptr (ex, chain, p, prev_blockptr - 1)

      -- free the rest
      in chain_find_shared_cleanup (ex, inode, chain, p, partial, 0)
    else
      -- need to detach the branch from the tree
      -- pop it
      let (chain, res) = chain_take_indirect (chain, p)
      in res
      | Some indirect =>
        let top = indirect.blockptr !indirect

        -- and lock it
        and (indirect, inode) = indirect_set_blockptr (indirect, inode, 0)

        -- free it, and the rest
        and (ex, chain) = indirect_restore (ex, chain, indirect, p)
        in chain_find_shared_cleanup (ex, inode, chain, p, partial, top)
      | None () ->
        -- indirect disappeared under us?
        ((ex, inode, chain), Error ())
  | Error () -> ((ex, inode, chain), Error ())
