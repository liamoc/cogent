--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

-- import libgum
include <gum/common.cogent>
include <gum/log.cogent>
include <gum/array.cogent>
include <gum/uarray.cogent> -- turns out, impl details ARE important
include <gum/wordarray.cogent>
include <gum/errno.cogent>
include <gum/iterator.cogent>
include <gum/vfs.cogent>
include <gum/vfs2.cogent> -- mystery COGENT bug
include <gum/dls.cogent>

include <gum/osbuffer.cogent>
include <gum/ospage.cogent>

-- import ext2 modules
include "ext2.cogent"
include "util.cogent"

include "groupdesc.cogent"

include "path.cogent"
include "indirect.cogent"
include "bchain.cogent"

include "balloc.cogent"
--include "bget.cogent"

include "dcommon.cogent"
include "dread.cogent"
include "dwrite.cogent"

include "ialloc.cogent"
include "iread.cogent"
include "iwrite.cogent"

-- useful for console:
include "debug.cogent"
include "test.cogent"

---------------------------------------------------------------

-- in-memory version of superblock
type Ext2Superblock = {
    inode_count             : U32,
    block_count             : U32,
    --reserved_block_count    : U32,
    free_block_count        : U32,
    free_inode_count        : U32,
    first_data_block        : U32,  -- this is a location
    block_size_lg2          : U32,  -- block size is 1024 << logsize
    --fragment_size_lg2       : U32,  -- frag size is 1024 << logsize
    blocks_per_group        : U32,
    fragments_per_group     : U32,
    inodes_per_group        : U32,
    --mount_time              : U32,  -- unix timestamp
    --write_time              : U32,  -- unix timestamp

    --mount_count             : U16,
    --max_mount_count         : U16,  -- before fsck
    magic                   : U16
    --state                   : U16,
    --error_behaviour         : U16,
    --minor_version           : U16,

    --last_check_time         : U32,  -- unix timestamp,
    --check_interval          : U32,  -- unix timestamp
    --creator_os              : U32   -- 0 = linux, 1 = hurd, 2 = masix, 3 = freebsd, 4 = lites
    --reservedBlockUid        : U16,
    --reservedBlockGid        : U16
}

const_defaultSuperBlockNum: U32
const_defaultSuperBlockNum = 1

const_defaultFlags: U32
const_defaultFlags = 0

get_u32_for_arg: ArrayFoldF (WordArray U8) ExState (WordArray U8) (ExState, U32)
get_u32_for_arg #{ elem = option, acc = ex, obsv = compare } =
    wordarray_findsub [U8] (option, compare, 0)
    | Found idx -> idx
        | 0 =>
            -- okay, grab the end bit
            let (ex, res) = wordarray_slice [U8] (ex, option, wordarray_length [U8] compare, wordarray_length[U8] option)
            in res
            | Success val =>
                let num = wordarray_u8_as_u32 val !val
                and ex = wordarray_free [U8] (ex, val)
                in Break (ex, num)
            | Error () -> Iterate ex
        | _ -> Iterate ex
    | _ -> Iterate ex

get_superblock_num: (ExState, (Array (WordArray U8))!) -> (ExState, U32)
get_superblock_num (ex, options) =
    wordarray_create_nz[U8] (ex, 6)
    | Success (ex, compare) =>
        let compare = wordarray_put2[U8] #{ arr = compare, idx = 0, val = 's' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 1, val = 'u' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 2, val = 'p' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 3, val = 'e' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 4, val = 'r' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 5, val = '=' }

        in array_fold [(WordArray U8), ExState, (WordArray U8), (ExState, U32)] #{
            arr  = options,
            f    = get_u32_for_arg,
            acc  = ex,
            obsv = compare } !options !compare
        | Iterate ex ->
            let ex = wordarray_free [U8] (ex, compare)
            in (ex, const_defaultSuperBlockNum)
        | Break (ex, num) ->
            let ex = wordarray_free [U8] (ex, compare)
            in (ex, num)
    | Error ex ->
        (ex, const_defaultSuperBlockNum)

get_flags: (ExState, (Array (WordArray U8))!) -> (ExState, U32)
get_flags (ex, options) =
    wordarray_create_nz[U8] (ex, 6)
    | Success (ex, compare) =>
        let compare = wordarray_put2[U8] #{ arr = compare, idx = 0, val = 'f' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 1, val = 'l' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 2, val = 'a' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 3, val = 'g' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 4, val = 's' }
        and compare = wordarray_put2[U8] #{ arr = compare, idx = 5, val = '=' }

        in array_fold [(WordArray U8), ExState, (WordArray U8), (ExState, U32)] #{
            arr  = options,
            f    = get_u32_for_arg,
            acc  = ex,
            obsv = compare } !options !compare
        | Iterate ex ->
            let ex = wordarray_free [U8] (ex, compare)
            in (ex, const_defaultFlags)
        | Break (ex, flags) ->
            let ex = wordarray_free [U8] (ex, compare)
            in (ex, flags)
    | Error (ex) ->
        (ex, const_defaultFlags)

allocate_the_indirects: Seq32_body (ExState, Array Indirect) () ()
allocate_the_indirects #{ acc = (ex, indirects), obsv, idx } =
    let (ex, res) = malloc_Indirect ex
    in res
    | Success indirect_t =>
        let indirect = indirect_t { blockptr = 0, buf = None (), offset = 0}
        and ((ex, indirects), _) = array_replace[Indirect] #{ arr = indirects, idx, elem = indirect, f = indirect_destroy2, ex }
        in ((ex, indirects), Iterate ())
    | Error () ->
        ((ex, indirects), Break ())


fs_mount: #{ex: ExState, options: (Array (WordArray U8))!} -> RR ExState #{state: FsState, mountinfo: #VfsMountInfo} U32
fs_mount #{ex, options} = 
    let (ex, res) = malloc_FsState ex
    in res
    | Success state_t ->
        let (ex, res) = osbuffer_create ex
        in res
        | Success buf_super ->
            -- find the block the superblock lies in
            let (ex, sb_num) = get_superblock_num (ex, options) !options
            and (ex, flags) = get_flags (ex, options) !options

            and _ = _cogent_log (dbg_EXT2_MOUNT, "fs_mount: mounted with flags ")
            and _ = _cogent_log_u32 (dbg_EXT2_MOUNT, flags)
            and _ = _cogent_log (dbg_EXT2_MOUNT, "\n")

            and state_t = state_t { superblock_num = sb_num }
            and ((ex, buf_super), res) = osbuffer_read_block #{ex, buf = buf_super, blk = sb_num}
            in res
            | Success () -> 
                -- get the superblock from it
                let (ex, res) = deserialise_Ext2Superblock (ex, buf_super, 0) !buf_super
                in res
                | Success (super, _) -> 
                    -- ensure superblock magic matched
                    let cur_super_magic = super.magic !super
                    in if cur_super_magic == const_ext2Magic then
                        -- calculate constants
                        let group_count = ((super.block_count - super.first_data_block - 1) / super.blocks_per_group + 1) !super
                        and inodes_per_block = const_blockSize / const_sizeof_Inode
                        and inode_tables_per_group = super.inodes_per_group / inodes_per_block !super

                        and _ = _cogent_log (dbg_EXT2_MOUNT, ("fs_mount: this filesystem has group count "))
                        and _ = _cogent_log_u32 (dbg_EXT2_MOUNT, group_count)
                        and _ = _cogent_log (dbg_EXT2_MOUNT, "\n")

                        -- prefetch all group descriptor buffers
                        in array_create [OSBuffer] (ex, group_count)
                        | Success (ex, group_desc_array) ->
                            array_map [OSBuffer, GroupDescLoaderAcc,
                                GroupDescLoaderObsv, GroupDescLoaderAcc]
                            #{ arr  = group_desc_array,
                               frm  = 0,
                               to   = group_count,
                               f    = put_group_desc_in_array,
                               acc  = (ex, 0),
                               obsv = (super.blocks_per_group, super.first_data_block, 1) -- TODO: super may not always start at block 1 (eg ext3)
                             } !super
                            | Iterate (group_desc_array, (ex, _)) ->
                                -- preallocate other stuff
                                wordarray_create [BlockOffset] (ex, maxChainSize)
                                | Success (ex, prealloc_offsets) =>
                                    wordarray_create [BlockPtr] (ex, const_maxIndexPathSize)
                                    | Success (ex, prealloc_blockptrs) =>
                                        let (ex, res) = malloc_Chain ex
                                        in res
                                        | Success prealloc_chain =>
                                            array_create [Indirect] (ex, maxChainSize)
                                            | Success (ex, prealloc_indirects) =>
                                                -- preallocate the indirects inside array
                                                let ((ex, prealloc_indirects), res) = seq32 [(ExState, Array Indirect), (), ()] #{
                                                    frm   = 0,
                                                    to    = maxChainSize,
                                                    step  = 1,
                                                    f     = allocate_the_indirects,
                                                    acc   = (ex, prealloc_indirects),
                                                    obsv  = ()
                                                }

                                                in res
                                                | Iterate () =>
                                                    -- put everything in our state
                                                    let state = state_t {
                                                          super,
                                                          group_count,
                                                          group_desc_array,
                                                          inode_tables_per_group,
                                                          super_buf = buf_super,
                                                          flags,
                                                          cur_overhead = 0,

                                                          prealloc_offsets = Some prealloc_offsets,
                                                          prealloc_indirects = Some prealloc_indirects,
                                                          prealloc_chain = Some prealloc_chain,
                                                          prealloc_blockptrs = Some prealloc_blockptrs
                                                        }

                                                    -- build mountinfo for vfs
                                                    and mountinfo = #{
                                                          s_magic = upcast const_ext2Magic,
                                                          s_flags = 0,
                                                          s_max_links = const_ext2LinkMax,
                                                          s_maxbytes = ext2_max_size (upcast const_blockSizeBits),
                                                          s_blocksize = const_blockSize,
                                                          s_blocksize_bits = const_blockSizeBits
                                                        }

                                                    -- and report we mounted!
                                                    in (ex, Success #{state, mountinfo})
                                                | Break () ->
                                                    -- failed to alloc
                                                    let ex = free_Chain (ex, prealloc_chain)
                                                    and ex = array_free [Indirect] #{ arr = prealloc_indirects, f = indirect_destroy2, ex }
                                                    and ex = wordarray_free [BlockPtr] (ex, prealloc_blockptrs)
                                                    and ex = wordarray_free [BlockPtr] (ex, prealloc_offsets)

                                                    and ex = array_free [OSBuffer] #{arr = group_desc_array, f = osbuffer_destroy, ex}
                                                    and ex = free_Ext2Superblock (ex, super)
                                                    and ex = osbuffer_destroy (ex, buf_super)
                                                    and ex = free_FsState (ex, state_t)
                                                    in (ex, Error eNoMem)
                                            | Error ex ->
                                                -- failed to alloc
                                                let ex = free_Chain (ex, prealloc_chain)
                                                and ex = wordarray_free [BlockPtr] (ex, prealloc_blockptrs)
                                                and ex = wordarray_free [BlockPtr] (ex, prealloc_offsets)

                                                and ex = array_free [OSBuffer] #{arr = group_desc_array, f = osbuffer_destroy, ex}
                                                and ex = free_Ext2Superblock (ex, super)
                                                and ex = osbuffer_destroy (ex, buf_super)
                                                and ex = free_FsState (ex, state_t)
                                                in (ex, Error eNoMem)
                                        | Error () ->
                                            -- failed to alloc
                                            let ex = wordarray_free [BlockPtr] (ex, prealloc_blockptrs)
                                            and ex = wordarray_free [BlockPtr] (ex, prealloc_offsets)

                                            and ex = array_free [OSBuffer] #{arr = group_desc_array, f = osbuffer_destroy, ex}
                                            and ex = free_Ext2Superblock (ex, super)
                                            and ex = osbuffer_destroy (ex, buf_super)
                                            and ex = free_FsState (ex, state_t)
                                            in (ex, Error eNoMem)
                                    | Error ex ->
                                        -- failed to alloc
                                        let ex = wordarray_free [BlockPtr] (ex, prealloc_offsets)
                                        
                                        and ex = array_free [OSBuffer] #{arr = group_desc_array, f = osbuffer_destroy, ex}
                                        and ex = free_Ext2Superblock (ex, super)
                                        and ex = undefined (ex, buf_super)
                                        and ex = free_FsState (ex, state_t)
                                        in (ex, Error eNoMem)
                                | Error ex ->
                                    -- failed to alloc
                                    let ex = array_free [OSBuffer] #{arr = group_desc_array, f = osbuffer_destroy, ex}
                                    and ex = free_Ext2Superblock (ex, super)
                                    and ex = osbuffer_destroy (ex, buf_super)
                                    and ex = free_FsState (ex, state_t)
                                    in (ex, Error eNoMem)
                            | Break (group_desc_array, (ex, _)) ->
                                -- failed to load a group desc buffer
                                let ex = array_free [OSBuffer] #{arr = group_desc_array, f = osbuffer_destroy, ex}
                                and ex = free_Ext2Superblock (ex, super)
                                and ex = osbuffer_destroy (ex, buf_super)
                                and ex = free_FsState (ex, state_t)
                                in (ex, Error eIO)
                        | Error ex ->
                            let ex = free_Ext2Superblock (ex, super)
                            and ex = free_FsState (ex, state_t)
                            and ex = osbuffer_destroy (ex, buf_super)
                            in (ex, Error eInval)
                    else    
                        let ex = free_Ext2Superblock (ex, super)
                        and ex = free_FsState (ex, state_t)
                        and ex = osbuffer_destroy (ex, buf_super)
                        in (ex, Error eInval)
                | Error () ->
                    let ex = osbuffer_destroy (ex, buf_super)
                    and ex = free_FsState (ex, state_t)
                    in (ex, Error eIO)
            | Error () -> 
                let ex = osbuffer_destroy (ex, buf_super)
                and ex = free_FsState (ex, state_t)
                in (ex, Error eIO)
        | Error () ->
            let ex = free_FsState (ex, state_t)
            in (ex, Error eNoMem)
    | Error () ->
        (ex, Error eNoMem)

undefined : all (a,b). a -> b

free_option_chain: (ExState, Option (Chain take (..))) -> ExState
free_option_chain (ex, maybe_chain) =
    maybe_chain
    | Some chain_t => free_Chain (ex, chain_t)
    | None () -> ex

free_option_wordarray: (ExState, Option (WordArray U32)) -> ExState
free_option_wordarray (ex, maybe_wa) =
    maybe_wa
    | Some wa => wordarray_free [U32] (ex, wa)
    | None () -> ex

free_option_indirects: (ExState, Option (Array Indirect)) -> ExState
free_option_indirects (ex, maybe_indirects) =
    maybe_indirects
    | Some indirects => array_free [Indirect] #{ arr = indirects, f = indirect_destroy2, ex }
    | None () -> ex

fs_unmount: #{ex: ExState, state: FsState} -> ExState
fs_unmount #{ex, state} = 
    let state_t { super, group_desc_array, super_buf, prealloc_offsets, prealloc_indirects, prealloc_chain, prealloc_blockptrs } = state
    and ex = free_Ext2Superblock (ex, super)
    and ex = array_free [OSBuffer] #{arr = group_desc_array, f = osbuffer_destroy, ex}
    and ex = osbuffer_destroy (ex, super_buf)
    and ex = free_FsState (ex, state_t)

    -- moved into functions to avoid state explosion
    and ex = free_option_chain (ex, prealloc_chain)
    and ex = free_option_wordarray (ex, prealloc_blockptrs)
    and ex = free_option_wordarray (ex, prealloc_offsets)
    and ex = free_option_indirects (ex, prealloc_indirects)

    in ex

malloc_Ext2Superblock: ExState -> RR ExState (Ext2Superblock take (..)) ()

deserialise_into_Ext2Superblock: (ExState, OSBuffer!, Ext2Superblock take (..), U32) -> RR ExState (Ext2Superblock, U32) (Ext2Superblock take (..))
deserialise_into_Ext2Superblock (ex, buf, obj_t, idx) =
    osbuffer_deserialise_Ple32 (buf, idx)
    | Success (inode_count, idx) ->
        osbuffer_deserialise_Ple32 (buf, idx)
        | Success (block_count, idx) ->
            osbuffer_deserialise_Ple32 (buf, idx + 4) -- skip 1 U32 field
            | Success (free_block_count, idx) ->
                osbuffer_deserialise_Ple32 (buf, idx)
                | Success (free_inode_count, idx) ->
                    osbuffer_deserialise_Ple32 (buf, idx)
                    | Success (first_data_block, idx) ->
                        osbuffer_deserialise_Ple32 (buf, idx)
                        | Success (block_size_lg2, idx) ->
                            osbuffer_deserialise_Ple32 (buf, idx + 4) -- skip 1 U32 field
                            | Success (blocks_per_group, idx) ->
                                osbuffer_deserialise_Ple32 (buf, idx)
                                | Success (fragments_per_group, idx) ->
                                    osbuffer_deserialise_Ple32 (buf, idx)
                                    | Success (inodes_per_group, idx) ->
                                        osbuffer_deserialise_Ple16 (buf, idx + (3 * 4)) -- skip 4 fields (2x U16, 2xU32 = 3xU32) 
                                        | Success (magic, idx) ->
                                            let -- obj = obj_t { .. }
                                                obj = obj_t { inode_count
                                                            , block_count
                                                            , free_block_count 
                                                            , free_inode_count
                                                            , first_data_block
                                                            , block_size_lg2
                                                            , blocks_per_group
                                                            , fragments_per_group
                                                            , inodes_per_group
                                                            , magic
                                                            }
                                            in (ex, Success (obj, idx))
                                        | Error () -> (ex, Error obj_t)
                                    | Error () -> (ex, Error obj_t)
                                | Error () -> (ex, Error obj_t)
                            | Error () -> (ex, Error obj_t)
                        | Error () -> (ex, Error obj_t)
                    | Error () -> (ex, Error obj_t)
                | Error () -> (ex, Error obj_t)
            | Error () -> (ex, Error obj_t)
        | Error () -> (ex, Error obj_t)
    | Error () -> (ex, Error obj_t)

free_Ext2Superblock: (ExState, Ext2Superblock take (..)) -> ExState

deserialise_Ext2Superblock: (ExState, OSBuffer!, U32) -> RR ExState (Ext2Superblock, U32) ()
deserialise_Ext2Superblock (ex, buf, idx) =
    let (ex, res) = malloc_Ext2Superblock ex
    in res
    | Success obj_t ->
        let (ex, res) = deserialise_into_Ext2Superblock (ex, buf, obj_t, idx)
        in res
        | Success (obj, idx') ->
            (ex, Success (obj, idx'))
        | Error obj_t ->
            (free_Ext2Superblock (ex, obj_t), Error ())
    | Error () -> (ex, Error ())

super_set_free_block_count: (ExState, OSBuffer, U32) -> (ExState, OSBuffer)
super_set_free_block_count (ex, buf, free_block_count) =
    osbuffer_serialise_Ple32 (buf, (4 * 3), free_block_count)
    | Success (buf, _) => 
        osbuffer_dirty (ex, buf)
    | Error buf -> (ex, buf)

super_set_free_inode_count: (ExState, OSBuffer, U32) -> (ExState, OSBuffer)
super_set_free_inode_count (ex, buf, free_block_count) =
    osbuffer_serialise_Ple32 (buf, (4 * 4), free_block_count)
    | Success (buf, _) => 
        osbuffer_dirty (ex, buf)
    | Error buf -> (ex, buf)
