--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

type DirentsInPageAcc = (ExState, Option Ext2DirEnt, OSPageBuffer, VfsDirContext, U64)
type DirentsInPageAccNoDEnt = (ExState, OSPageBuffer, VfsDirContext, U64)
type DirentsInPageObsv = U64

type EmptyDirentsInPageAcc = (ExState, Option Ext2DirEnt, OSPageBuffer, U32)
type EmptyDirentsInPageAccNoDirent = (ExState, OSPageBuffer, U32)

get_next_dirent_from_page: Generator Ext2DirEnt () U32 DirentsInPageAcc DirentsInPageObsv
get_next_dirent_from_page (#{acc = (ex, maybe_prev_dirent, pagebuf, dirctx, cur_offset), obsv = (limit)}) = 
    maybe_prev_dirent
    | Some prev_dirent ->
        -- FIXME: ideally, unboxed or use pre-allocated (but need to handle inner char[])
        -- we already have prev_dirent
        let (ex, res) = deserialise_Ext2DirEnt2 (ex, pagebuf, u64_to_u32 cur_offset) !pagebuf -- XXX: shouldn't downcast
        in res
        | Success (new_dirent, _) ->
            -- and yield with new_dirent and new_offset
            ((ex, Some prev_dirent, pagebuf, dirctx, cur_offset), Yield new_dirent)
        | Error () ->
            -- failed to get object, ran off page?
            let _ = _cogent_log (dbg_EXT2_DIR_READ, "get_next_dirent_from_page: failed to deser\n")
            in ((ex, Some prev_dirent, pagebuf, dirctx, cur_offset), Stop eIO)
    | _ ->
        -- should never happen
        let _ = _cogent_log (dbg_EXT2_DIR_READ, "get_next_dirent_from_page: had previous entry; impossible?\n")
        in ((ex, None (), pagebuf, dirctx, cur_offset), Stop eFault)

-- same as above
get_next_dirent_from_page4: Generator Ext2DirEnt () U32 EmptyDirentsInPageAcc DirentsInPageObsv
get_next_dirent_from_page4 (#{acc = (ex, maybe_prev_dirent, pagebuf, cur_offset), obsv = (limit)}) = 
    maybe_prev_dirent
    | Some prev_dirent ->
        let (ex, res) = deserialise_Ext2DirEnt2 (ex, pagebuf, cur_offset) !pagebuf
        in res
        | Success (new_dirent, _) ->
            ((ex, Some prev_dirent, pagebuf, cur_offset), Yield new_dirent)
        | Error ->
            ((ex, Some prev_dirent, pagebuf, cur_offset), Stop eIO)
    | _ ->
        -- should never happen
        ((ex, None (), pagebuf, cur_offset), Stop eFault)

-- inner nested loop at dir.c:332
emit_dirent_from_page2: (Ext2DirEnt, DirentsInPageAccNoDEnt) -> ConsumerResult () U32 DirentsInPageAcc
emit_dirent_from_page2 (new_dirent, (ex, pagebuf, dirctx, cur_offset)) =
    let reclen = new_dirent.record_length !new_dirent
    and inode = new_dirent.inode !new_dirent
    in if reclen /= 0 then
        if inode /= 0 then
            vfs_dir_emit #{ dirctx, name = new_dirent.name, ino = new_dirent.inode, ftype = upcast new_dirent.file_type} !new_dirent
            | Break #{dirctx} ->
                ((ex, Some new_dirent, pagebuf, dirctx, cur_offset), Stop 0)
            | Iterate #{dirctx} -> 
                ((ex, Some new_dirent, pagebuf, dirctx, cur_offset), Next)
        else
            -- ignore this entry if inode == 0
            ((ex, Some new_dirent, pagebuf, dirctx, cur_offset), Next)
    else
        let _ = _cogent_log (dbg_EXT2_DIR_READ, "emit_dirent_from_page2: stopping, dirent had zero-length reclen\n")
        in ((ex, Some new_dirent, pagebuf, dirctx, cur_offset), Stop eIO)

emit_dirent_from_page: Consumer Ext2DirEnt () U32 DirentsInPageAcc DirentsInPageObsv
emit_dirent_from_page #{obj = new_dirent, acc = (ex, maybe_prev_dirent, pagebuf, dirctx, offset), obsv = limit} =
    --let _ = _cogent_log (dbg_EXT2_DIR_READ, "emit_dirent_from_page: have dirent @ offset ) 
    --and _ = _cogent_log_u64 (dbg_EXT2_DIR_READ, offse) 
    --and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n") 
    if offset > limit then
        let ex = destroy_Ext2DirEnt (ex, new_dirent)
        in ((ex, maybe_prev_dirent, pagebuf, dirctx, offset), Return ())
    else
        -- replace prev dirent with new one in accumulator
        let increment = upcast (ext2_rec_len_from_disk new_dirent.record_length) !new_dirent
        and offset = offset + increment
        and dirctx_t { pos } = dirctx
        and pos = pos + increment
        and dirctx = dirctx_t { pos }
        
        in maybe_prev_dirent
        | Some prev_dirent ->
            --let _ = _cogent_log (dbg_EXT2_DIR_READ, "destroying dirent...")
            let ex = destroy_Ext2DirEnt (ex, prev_dirent)
            in emit_dirent_from_page2 (new_dirent, (ex, pagebuf, dirctx, offset))
        | None ->
            emit_dirent_from_page2 (new_dirent, (ex, pagebuf, dirctx, offset))

check_dirent_empty2: (Ext2DirEnt, EmptyDirentsInPageAccNoDirent) -> ConsumerResult () U32 EmptyDirentsInPageAcc
check_dirent_empty2 (new_dirent, (ex, pagebuf, cur_offset)) =
    let reclen = new_dirent.record_length !new_dirent
    and inode = new_dirent.inode !new_dirent
    and namelen = new_dirent.name_length !new_dirent

    in if reclen /= 0 then
        if inode /= 0 then
            let had_first_dot = wordarray_get [U8] (new_dirent.name, 0) == '.' !new_dirent
            in if had_first_dot then
                namelen
                | 1 -> ((ex, Some new_dirent, pagebuf, cur_offset), Next ())
                | 2 ->
                    let had_second_dot = wordarray_get[U8] (new_dirent.name, 1) == '.' !new_dirent
                    in if had_second_dot then
                      ((ex, Some new_dirent, pagebuf, cur_offset), Next)
                    else
                      ((ex, Some new_dirent, pagebuf, cur_offset), Stop 0)
                | _ ->
                    ((ex, Some new_dirent, pagebuf, cur_offset), Stop 0)
            else
                ((ex, Some new_dirent, pagebuf, cur_offset), Stop 0)
        else
            -- ignore this entry if inode == 0
            ((ex, Some new_dirent, pagebuf, cur_offset), Next ())
    else
        ((ex, Some new_dirent, pagebuf, cur_offset), Stop eIO)

check_dirent_empty: Consumer Ext2DirEnt () U32 EmptyDirentsInPageAcc DirentsInPageObsv
check_dirent_empty #{ obj = new_dirent, acc = (ex, maybe_prev_dirent, pagebuf, offset), obsv = limit} =
    if upcast offset > limit then
        let _ = _cogent_log (dbg_EXT2_DIR_READ, "check_dirent_empty: offset ") 
        and _ = _cogent_log_u32 (dbg_EXT2_DIR_READ, offset)
        and _ = _cogent_log (dbg_EXT2_DIR_READ, " was more than pagemax ") 
        and _ = _cogent_log_u64 (dbg_EXT2_DIR_READ, limit)
        and _ = _cogent_log (dbg_EXT2_DIR_READ, ", breaking for this page\n") 
        and ex = destroy_Ext2DirEnt (ex, new_dirent)
        in ((ex, maybe_prev_dirent, pagebuf, offset), Return ())
    else
        -- replace prev dirent with new one in accumulator
        let increment = upcast (ext2_rec_len_from_disk new_dirent.record_length) !new_dirent
        and offset = offset + increment
        
        in maybe_prev_dirent
        | Some prev_dirent ->
            let ex = destroy_Ext2DirEnt (ex, prev_dirent)
            in check_dirent_empty2 (new_dirent, (ex, pagebuf, offset))
        | None ->
            check_dirent_empty2 (new_dirent, (ex, pagebuf, offset))

type PerPageEmptyAcc = (ExState)
type PerPageEmptyObsv = (U64, VfsInode)

get_page_and_check_empty: Seq64_body PerPageEmptyAcc PerPageEmptyObsv U32
get_page_and_check_empty (#{acc = (ex), obsv = (npages, inode), idx = n}) =
    let _ = _cogent_log (dbg_EXT2_DIR_READ, "get_page_and_check_empty: page ")
    and _ = _cogent_log_u64 (dbg_EXT2_DIR_READ,  n) 
    and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n") 
    in ospagecache_read (vfs_inode_get_mapping (inode), n) !inode
    | Success page =>
        ospage_map page
        | Success (page, kaddr) =>
            let (ex, res) = deserialise_Ext2DirEnt2 (ex, kaddr, 0) !kaddr 
            in res
            | Success (dirent, _) ->
                let limit = ext2_last_byte (inode, n) - upcast (ext2_dir_rec_len 1) !inode
                and ((ex, maybe_dirent, kaddr, _), res) = iterate_do [Ext2DirEnt, (), U32, EmptyDirentsInPageAcc, DirentsInPageObsv] (#{
                    init = dirent,
                    gen = get_next_dirent_from_page4,
                    cons = check_dirent_empty,
                    acc = (ex, None (), kaddr, 0),
                    obsv = (limit) })

                in res
                | Stop err ->
                    -- had error/existing dirent
                    let page = ospage_unmap (page, kaddr)
                    and _ = ospagecache_release (page)

                    in maybe_dirent
                    | Some dirent ->
                        let ex = destroy_Ext2DirEnt (ex, dirent)
                        in (ex, Break (err))
                    | None -> (ex, Break (err))
                | Return ->
                    -- ran out of directory entries on this page
                    -- so should get next page and try reading from there
                    let page = ospage_unmap (page, kaddr)
                    and _ = ospagecache_release (page)

                    in maybe_dirent
                    | Some dirent ->
                        let ex = destroy_Ext2DirEnt (ex, dirent)
                        in (ex, Iterate ())
                    | None -> (ex, Iterate ())
            | Error ->
                -- failed to deserialise first dirent
                let page = ospage_unmap (page, kaddr)
                and _ = ospagecache_release (page)
                in (ex, Break eIO)
        | Error page ->
            -- faield to map
            let _ = ospagecache_release (page)
            in (ex, Break eIO)
    | Error ->
        -- faild to fetch page from mapping
        (ex, Break eIO)

-- yet another page loop, eugh..
ext2_dir_is_empty: (ExState, FsState, VfsInode!) -> RR (ExState, FsState) Bool U32
ext2_dir_is_empty (ex, state, parent_inode) =
    let npages = ext2_dir_pages (parent_inode) !parent_inode
    and (ex, res) = seq64 [PerPageEmptyAcc, PerPageEmptyObsv, U32] #{
        frm = 0,
        to = npages,
        step = 1,
        f = get_page_and_check_empty,
        acc = ex,
        obsv = (npages, parent_inode) }

    in res
    | Iterate () ->
        ((ex, state), Success True)
    | Break err ->
        if err == 0 then
            -- had item
            ((ex, state), Success False)
        else
            ((ex, state), Error err)

type PerPageLoopAcc = (ExState, VfsDirContext, U64, VfsInode)
type PerPageLoopObsv = (U64)

get_page_and_iterate_dirents: Seq64_body PerPageLoopAcc PerPageLoopObsv U32
get_page_and_iterate_dirents #{acc = (ex, dirctx, offset, inode), obsv = npages, idx = n} = 
    let _ = _cogent_log (dbg_EXT2_DIR_READ, "get_page_and_iterate_dirents: page ") 
    and _ = _cogent_log_u64 (dbg_EXT2_DIR_READ,  n) 
    and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n") 
    in ospagecache_read (vfs_inode_get_mapping (inode), n) !inode
    | Success page -> ospage_map page
        | Success (page, kaddr) ->
            -- TODO: would check need_revalidate here, should be an accumulator
            -- so we only act on it once per parent call
            let (ex, res) = deserialise_Ext2DirEnt2 (ex, kaddr, u64_to_u32 offset) !kaddr  -- XXX: downcast
            in res
            | Success (dirent, _) ->
                let limit = ext2_last_byte (inode, n) - upcast (ext2_dir_rec_len 1) !inode
                --and _ = _cogent_log (dbg_EXT2_DIR_READ, "got the first dirent of the page! gonna emit and fetch loop now\n")
                and ((ex, maybe_dirent, kaddr, dirctx, offset), res) =
                iterate_do [Ext2DirEnt, (), U32,
		        DirentsInPageAcc, DirentsInPageObsv] (#{
                    init = dirent,  -- emit runs first with init, then get_next
                    gen  = get_next_dirent_from_page,
                    cons = emit_dirent_from_page,
                    acc  = (ex, None (), kaddr, dirctx, offset),
                    obsv = limit
                    })
                in res
                | Stop err ->
                    -- needed to stop (either dir_emit told us to break or ran off page)
                    let page = ospage_unmap (page, kaddr)
                    and _ = ospagecache_release (page)

                    in maybe_dirent
                    | Some dirent ->
                        -- update offset from last dirent ONLY if we didn't have error
                        let ex = destroy_Ext2DirEnt (ex, dirent)
                        in if err == 0 then
                            ((ex, dirctx, offset, inode), Break err)
                        else
                            -- actual error occured, we usually break and return from func, so no update
                            ((ex, dirctx, offset, inode), Break err)
                    | None -> ((ex, dirctx, offset, inode), Break err)
                | Return ->
                    -- ran out of directory entries on this page
                    -- so should get next page and try reading from there
                    let page = ospage_unmap (page, kaddr)
                    and _ = ospagecache_release page

                    and offset = 0
                    in maybe_dirent
                    | Some dirent ->
                        let ex = destroy_Ext2DirEnt (ex, dirent)
                        in ((ex, dirctx, offset, inode), Iterate)
                    | None -> ((ex, dirctx, offset, inode), Iterate)
            | Error ->
                let page = ospage_unmap (page, kaddr)
                and _ = ospagecache_release page

                and _ = _cogent_log (dbg_EXT2_DIR_READ, "get_page_and_iterate_dirents: failed to deser\n")
                in ((ex, dirctx, offset, inode), Break eIO)
        | Error page ->
            let _ = ospagecache_release page

            and _ = _cogent_log (dbg_EXT2_DIR_READ, "get_page_and_iterate_dirents: failed to map\n")
            in ((ex, dirctx, offset, inode), Break eIO)
    | Error ->
        let _ = _cogent_log (dbg_EXT2_DIR_READ, "get_page_and_iterate_dirents: failed to get page\n")
        in ((ex, dirctx, offset, inode), Break eIO)

fsop_dir_iterate: #{ex: ExState, state: FsState, parent_inode: VfsInode, dirctx: VfsDirContext} 
               -> RR #{ex: ExState, state: FsState, parent_inode: VfsInode, dirctx: VfsDirContext} () U32
fsop_dir_iterate #{ex,state,parent_inode,dirctx} =
    let npages = ext2_dir_pages (parent_inode) !parent_inode
    and dirctx_t { pos } = dirctx
    and offset = pos .&. complement os_PAGE_CACHE_MASK
    and start_page = pos >> os_PAGE_CACHE_SHIFT
    and inode_size = vfs_inode_get_size (parent_inode) !parent_inode
    in if pos > inode_size - upcast (ext2_dir_rec_len 1) then
        let dirctx = dirctx_t { pos }
        in (#{ex = ex, state, parent_inode, dirctx}, Success)
    else
        -- TODO: we don't care about FEATURE_INCOMPAT_FILETYPE right now (or ever?)
        let dirctx = dirctx_t { pos }
        and ((ex, dirctx, offset, parent_inode), res) = seq64 [PerPageLoopAcc,
                PerPageLoopObsv, U32]
        #{
            frm = start_page,
            to = npages,
            step = 1,
            f = get_page_and_iterate_dirents,
            acc = (ex, dirctx, offset, parent_inode),
            obsv = npages
        }
        in res
        | Iterate ->
            (#{ex = ex, state, parent_inode, dirctx}, Success ())
        | Break err ->
            if err == 0 then -- vfs_emit just told us to stop, no problem
                (#{ex = ex, state, parent_inode, dirctx}, Success ())
            else
                (#{ex = ex, state, parent_inode, dirctx}, Error err)

---------------

type CheckMatchingDirentAcc = (ExState, FsState, U64, U64)
type CheckMatchingDirentObsv = (CString, U64, OSPageBuffer)

-- inner loop at dir.c:396
get_next_dirent_from_page2: Generator Ext2DirEnt (Option Ext2DirEnt) U32 CheckMatchingDirentAcc CheckMatchingDirentObsv 
get_next_dirent_from_page2(#{acc = (ex, state, offset, prev_offset), obsv = (name, offset_end, pagebuf)}) = 
    if offset <= offset_end then
        let (ex, res) = deserialise_Ext2DirEnt2 (ex, pagebuf, u64_to_u32 offset) -- XXX: shouldn't downcast
        and _ = _cogent_log (dbg_EXT2_DIR_READ, "get_next_dirent_from_page2: deserialising dirent @ offset ")
        and _ = _cogent_log_u64 (dbg_EXT2_DIR_READ, offset)
        and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n") 
        in res
        | Success (dirent, _) ->
            let new_offset = offset + upcast (ext2_rec_len_from_disk dirent.record_length) !dirent
            in ((ex, state, new_offset, offset), Yield dirent)
        | Error () ->
            let _ = _cogent_log (dbg_EXT2_DIR_READ, "get_next_dirent_from_page_prime: failed to deser\n")
            in ((ex, state, offset, offset), Stop eIO)
    else
        -- got to end of page
        ((ex, state, offset, prev_offset), Return (None ()))

check_matching_and_increment: Consumer Ext2DirEnt (Option Ext2DirEnt) U32 CheckMatchingDirentAcc CheckMatchingDirentObsv
check_matching_and_increment #{ obj = de, acc = (ex, state, offset, prev_offset), obsv = (name, offset_end, pagebuf)} = 
    let de_reclen = de.record_length !de
    in if de_reclen /= 0 then
        let matched = ext2_match (name, de) !de
        in if matched then
            ((ex, state, offset, prev_offset), Return (Some de))
        else
            let ex = destroy_Ext2DirEnt (ex, de) -- FIXME: should use state
            in ((ex, state, offset, prev_offset), Next ())
    else
        let ex = destroy_Ext2DirEnt (ex, de) -- FIXME: should use state
        and _ = _cogent_log (dbg_EXT2_DIR_READ, "check_matching_and_increment: zero-length dir\n")
        in ((ex, state, offset, prev_offset), Stop eInval)

type FindEntryAcc = (ExState, FsState, U64)
type FindEntryObsv = (CString, VfsInode, U16, U64, U64)

get_next_page: Generator (OSPage, OSPageBuffer) (Ext2DirEnt, OSPage, OSPageBuffer, U64) U32 FindEntryAcc FindEntryObsv
get_next_page (#{acc = (ex, state, n), obsv = (name, dir, _, _, _)}) =
    ospagecache_read (vfs_inode_get_mapping (dir), n)
    | Success (page) ->
        ospage_map (page)
        | Success (page, kaddr) ->
            ((ex, state, n), Yield (page, kaddr))
        | Error (page) ->
            let _ = ospagecache_release (page)

            and _ = _cogent_log (dbg_EXT2_DIR_READ, "get_next_page: failed to map\n")
            in ((ex, state, n), Stop eIO)
    | Error () ->
        let _ = _cogent_log (dbg_EXT2_DIR_READ, "get_next_page: could not get page\n")
        in ((ex, state, n), Stop eIO)

check_page_loop: Consumer (OSPage, OSPageBuffer) (Ext2DirEnt, OSPage, OSPageBuffer, U64) U32 FindEntryAcc FindEntryObsv
check_page_loop (#{obj = (page, pagebuf), acc = (ex, state, n), obsv = (name, dir, reclen, npages, start)}) =
    let _ = _cogent_log (dbg_EXT2_DIR_READ, "check_page_loop: at page ") 
    and _ = _cogent_log_u64 (dbg_EXT2_DIR_READ, n) 
    and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n") 
    and offset_end = ext2_last_byte (dir, n) - upcast reclen

    -- inner loop at line 396
    and ((ex, state, next_offset, prev_offset), res) = iterate [Ext2DirEnt,
            (Option Ext2DirEnt), U32, CheckMatchingDirentAcc,
	    CheckMatchingDirentObsv] (#{
        gen = get_next_dirent_from_page2,
        cons = check_matching_and_increment,
        acc = (ex, state, 0, 0),
        obsv = (name, offset_end, pagebuf)
    }) !pagebuf
    in res
    | Return maybe_de ->
        -- maybe got the answer
        maybe_de
        | Some de ->
            let _ = _cogent_log (dbg_EXT2_DIR_READ, "check_page_loop: had dirent at offset ")
            and _ = _cogent_log_u64 (dbg_EXT2_DIR_READ, prev_offset) 
            and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n")
            in ((ex, state, n), Return (de, page, pagebuf, prev_offset))
        | None ->
            -- no answer, just need the next page
            -- update increment
            let n = n + 1

            -- free the page
            and page = ospage_unmap (page, pagebuf)
            and _ = ospagecache_release (page)

            -- check for wrap around
            in if n >= npages then
                let n:U64 = 0
                in if n == start then
                    -- wrapped around to beginning page, but still didn't
                    -- find anything. stop and report no entry.
                    let _ = _cogent_log (dbg_EXT2_DIR_READ, "check_page_loop: wrapped around and reset n, but didn't find entry\n")
                    in ((ex, state, n), Stop eNoEnt)
                else
                    ((ex, state, n), Next ())
            else
                if n == start then
                    -- wrapped around to beginning page, but still didn't
                    -- find anything. stop and report no entry.
                    let _ = _cogent_log (dbg_EXT2_DIR_READ, "check_page_loop: wrapped around, but didn't find entry\n")
                    in ((ex, state, n), Stop eNoEnt)
                else
                    ((ex, state, n), Next ())
    | Stop err ->
        -- something went bad
        let page = ospage_unmap (page, pagebuf)
        and _ = ospagecache_release (page)

        in ((ex, state, n), Stop err)
    
ext2_find_entry2: (ExState, FsState, VfsInode, CString!, U16, U64, U64) -> RR (ExState, FsState, VfsInode) (Ext2DirEnt, OSPage, OSPageBuffer, U32) (U32)
ext2_find_entry2 (ex, state, dir, name, reclen, npages, start) = 
    let n = start
    and _ = _cogent_log (dbg_EXT2_DIR_READ, "ext2_find_entry2: starting at page ")
    and _ = _cogent_log_u64 (dbg_EXT2_DIR_READ, n) 
    and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n") 
    -- TODO: can express this as a seq32 loop
    -- outer loop at line 389
    and ((ex, state, n), res) = iterate [(OSPage, OSPageBuffer),
            (Ext2DirEnt, OSPage, OSPageBuffer, U64), U32,
            FindEntryAcc, FindEntryObsv]
    #{
        gen = get_next_page,
        cons = check_page_loop,
        acc = (ex, state, n),
        obsv = (name, dir, reclen, npages, start)
    } !dir
    in res
    | Return (de, page, kaddr, offset) ->
        -- found it, update dir_start_lookup for next time
        let dir_t { fs } = dir
        and fs_t { dir_start_lookup } = fs
        and fs = fs_t { dir_start_lookup = n }
        and dir = dir_t { fs }
        in ((ex, state, dir), Success (de, page, kaddr, u64_to_u32 offset)) -- XXX: downcast
    | Stop err ->
        -- didn't find it, or some other error occured
        ((ex, state, dir), Error err)

-- so, yet again, no documentation
-- basically, we use dir_start_lookup to cache where we last were in
-- find_entry. this is to increase performance when we're attempting to
-- lookup sequential items. we round this to the nearest page
ext2_find_entry: (ExState, FsState, VfsInode, CString!) -> RR (ExState, FsState, VfsInode) (Ext2DirEnt, OSPage, OSPageBuffer, U32) (U32)
ext2_find_entry (ex, state, dir, name) =
    let reclen = ext2_dir_rec_len (u32_to_u16 (wordarray_length[U8] (name))) !name -- XXX: downcast, but necessary
    and npages = ext2_dir_pages (dir) !dir
    in if npages == 0 then
        let _ = _cogent_log (dbg_EXT2_DIR_READ, "ext2_find_entry: dir had no pages, aborting\n")
        in ((ex, state, dir), Error eNoEnt)
    else
        let start = dir.fs.dir_start_lookup !dir
        in if start >= npages then
            let start = 0
            in ext2_find_entry2 (ex, state, dir, name, reclen, npages, start)
        else
            ext2_find_entry2 (ex, state, dir, name, reclen, npages, start)

ext2_find_entry_bang: (ExState, FsState, VfsInode!, CString!) -> RR (ExState, FsState) (Ext2DirEnt, OSPage, OSPageBuffer, U32) (U32)
ext2_find_entry_bang (ex, state, dir, name) =
    let reclen = ext2_dir_rec_len (u32_to_u16 (wordarray_length[U8] (name))) -- XXX: downcast, but necessary
    and npages = ext2_dir_pages (dir)
    in if npages == 0 then
        let _ = _cogent_log (dbg_EXT2_DIR_READ, "ext2_find_entry_bang: dir had no pages, aborting\n")
        in ((ex, state), Error eNoEnt)
    else
        let ((ex, state, n), res) = iterate [(OSPage, OSPageBuffer),
            (Ext2DirEnt, OSPage, OSPageBuffer, U64), U32,
            FindEntryAcc, FindEntryObsv]
        (#{
            gen = get_next_page,
            cons = check_page_loop,
            acc = (ex, state, 0),
            obsv = (name, dir, reclen, npages, 0)
        })
        in res
        | Return (de, page, kaddr, offset) ->
            ((ex, state), Success (de, page, kaddr, u64_to_u32 offset)) -- XXX: downcast
        | Stop err ->
            -- didn't find it, or some other error occured
            ((ex, state), Error err)

ext2_inode_by_name: (ExState, FsState, VfsInode, CString!) -> RR (ExState, FsState, VfsInode) (VfsIno) (U32)
ext2_inode_by_name (ex, state, inode, name) =
    let ((ex, state, inode), m) = ext2_find_entry (ex, state, inode, name)
    in m
    | Success (de, page, kaddr, _) ->
        let page = ospage_unmap (page, kaddr)
        and _ = ospagecache_release (page)

        and de_ino = de.inode !de
        and ex = destroy_Ext2DirEnt (ex, de) -- FIXME: should be unboxed or inside state
        in if de_ino /= 0 then
            let _ = _cogent_log (dbg_EXT2_DIR_READ, "ext2_inode_by_name: found dirent, page, and valid inode\n")
            in ((ex, state, inode), Success de_ino)
        else
            let _ = _cogent_log (dbg_EXT2_DIR_READ, "ext2_inode_by_name: found dirent, page, but ino was 0\n")
            in ((ex, state, inode), Error eNoEnt)
    | Error err ->
        let _ = _cogent_log (dbg_EXT2_DIR_READ, "ext2_inode_by_name: failed to find entry\n")
        --in ((ex, state, inode), Error err)
        in ((ex, state, inode), Error eNoEnt)

fsop_dir_lookup: #{ex: ExState, state: FsState, parent_inode: VfsInode, name: CString!, flags: VfsFlags}
              -> RR #{ex: ExState, state: FsState, parent_inode: VfsInode} VfsInode U32
fsop_dir_lookup #{ex, state, parent_inode, name, flags} = 
    if wordarray_length [U8] name > const_maxNameLen then
        (#{ex, state, parent_inode}, Error eNameTooLong)
    else
        let ((ex, state, parent_inode), res) = ext2_inode_by_name (ex, state, parent_inode, name)
        in res
        | Success ino ->
            let _ = _cogent_log (dbg_EXT2_DIR_READ, "fsop_dir_lookup: had ino ")
            and _ = _cogent_log_u32 (dbg_EXT2_DIR_READ, ino)
            and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n")
            and ((ex, state), res) = ext2_inode_get (ex, state, ino)
            in res
            | Success inode ->
                let _ = _cogent_log (dbg_EXT2_DIR_READ, "fsop_dir_lookup: gave ino ")
                and _ = _cogent_log_u32 (dbg_EXT2_DIR_READ, vfs_inode_get_ino inode) !inode
                and _ = _cogent_log (dbg_EXT2_DIR_READ, "\n")
                in (#{ex, state, parent_inode}, Success inode)
            | Error err -> (#{ex, state, parent_inode}, Error err)
        | Error err ->
            let _ = _cogent_log (dbg_EXT2_DIR_READ, "fsop_dir_lookup: did not find anything by that name\n")
            in (#{ex, state, parent_inode}, Error err)
