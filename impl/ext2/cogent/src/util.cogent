--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

dbg_EXT2_INODE: U32
dbg_EXT2_INODE = 1

dbg_EXT2_GROUPDESC: U32
dbg_EXT2_GROUPDESC = 2

dbg_EXT2_CHAIN: U32
dbg_EXT2_CHAIN = 4

dbg_EXT2_DIR_READ: U32
dbg_EXT2_DIR_READ = 8

dbg_EXT2_DIR_WRITE: U32
dbg_EXT2_DIR_WRITE = 16

dbg_EXT2_DIR_BALLOC: U32
dbg_EXT2_DIR_BALLOC = 32

dbg_EXT2_TEST: U32
dbg_EXT2_TEST = 64

dbg_EXT2_INODE_READ: U32
dbg_EXT2_INODE_READ = 128

dbg_EXT2_BLOCK: U32
dbg_EXT2_BLOCK = 256

dbg_EXT2_INODE_ALLOC: U32
dbg_EXT2_INODE_ALLOC = 512

dbg_EXT2_INODE_WRITE: U32
dbg_EXT2_INODE_WRITE = 1024

dbg_EXT2_MOUNT: U32
dbg_EXT2_MOUNT = 2048

_COGENT_LOG_LEVEL: U32
_COGENT_LOG_LEVEL = 0x0


dispose_existing_dirent: (ExState, Option Ext2DirEnt) -> (ExState)
dispose_existing_dirent (ex, maybe_de) =
    maybe_de
    | Some de ->
        let de_t { name } = de
        and ex = wordarray_free [U8] (ex, name)
        in ex
    | _ -> (ex)


dispose_existing_buffer: (ExState, Option OSBuffer) -> (ExState)
dispose_existing_buffer (ex, maybe_buffer) =
    maybe_buffer
    | Some buffer -> osbuffer_destroy (ex, buffer)
    | _ -> (ex)

shift_left: (U32) -> U32
shift_left (x) = x << 1

-- helper to create buffer and read into it at the same time
ext2_get_block: (ExState, U32) -> RR ExState (OSBuffer) ()
ext2_get_block (ex, blocknum) =
    let (ex, res) = osbuffer_create (ex)
    in res
    | Success buf ->
        let ((ex, buf), res) = osbuffer_read_block (#{ex, buf, blk = blocknum})
        in res
        | Success () -> (ex, Success buf)
        | Error () ->
            let (ex) = osbuffer_destroy (ex, buf)
            in (ex, Error ())
    | Error () -> (ex, Error ())

--ext2_get_or_create_page: (ExState, VfsInode!, U64) -> R (ExState, OSPage) (ExState)
--ext2_get_or_create_page (ex, inode, n) =
--    ospage_read_or_create_mapping (vfs_inode_get_mapping (inode), n)
--    | Success (page) ->
--        -- FIXME: need to check page flags for "checked"
--        Success (ex, page)
--    | Error _ ->
--        Error (ex)

--ext2_get_page: (ExState, VfsInode!, U64) -> R (ExState, OSPage) (ExState)
--ext2_get_page (ex, inode, n) =
--    ospage_read_mapping (vfs_inode_get_mapping (inode), n)
--    | Success (page) ->
--        -- FIXME: need to check page flags for "checked"
--        Success (ex, page)
--    | Error _ ->
--        Error (ex)

--ext2_put_page: (ExState, OSPage) -> ExState
--ext2_put_page (ex, page) =
--    let _ = ospage_release (page)
--    in ex

ext2_prepare_chunk: (ExState, FsState, OSPage, U64, U32) -> RR (ExState, FsState, OSPage) () U32
ext2_prepare_chunk (ex, state, page, pos, len) =
    let _ = _cogent_log (dbg_EXT2_BLOCK, "ext2_prepare_chunk: prepare over [")
    and _ = _cogent_log_u64 (dbg_EXT2_BLOCK, pos)
    and _ = _cogent_log (dbg_EXT2_BLOCK, ", ")
    and _ = _cogent_log_u64 (dbg_EXT2_BLOCK, pos + upcast len)
    and _ = _cogent_log (dbg_EXT2_BLOCK, ")\n")
    in ospage_write_prepare (ex, state, page, pos, len)

ext2_commit_chunk2: (ExState, FsState, OSPage, VfsInode) -> (ExState, FsState, OSPage)
ext2_commit_chunk2 (ex, state, page, inode) =
    let is_sync = vfs_inode_is_sync_dir inode !inode
    in if is_sync then
        let _ = _cogent_log (dbg_EXT2_BLOCK, "ext2_commit_chunk2: writing page because sync requested on dir\n")
        and page = ospage_write (page)

        and _ = _cogent_log (dbg_EXT2_BLOCK, "ext2_commit_chunk2: syncing inode because sync requested on dir\n")
        and inode = vfs_inode_sync_metadata inode

        and ex = vfs_inode_put #{ex, inode}
        in (ex, state, page)
    else
        let page = ospage_unlock page
        and ex = vfs_inode_put #{ex, inode}
        in (ex, state, page)

ext2_commit_chunk: (ExState, FsState, OSPage, U64, U32) -> (ExState, FsState, OSPage)
ext2_commit_chunk (ex, state, page, pos, len) =
    -- TODO: increment i_version
    let _ = _cogent_log (dbg_EXT2_BLOCK, "ext2_commit_chunk: commit over [")
    and _ = _cogent_log_u64 (dbg_EXT2_BLOCK, pos)
    and _ = _cogent_log (dbg_EXT2_BLOCK, ", ")
    and _ = _cogent_log_u64 (dbg_EXT2_BLOCK, pos + upcast len)
    and _ = _cogent_log (dbg_EXT2_BLOCK, ")\n")

    and (ex, state, page) = ospage_write_commit (ex, state, page, pos, len)
    and inode = ospage_get_host page !page
    and cur_size = vfs_inode_get_size inode !inode
    and new_size = pos + upcast len
    and over_size = new_size > cur_size
    in if over_size then
        -- wrote past current directory end; update
        let inode = vfs_inode_set_size (inode, new_size)
       
        and (ex, inode) = vfs_inode_mark_dirty (ex, inode)

        in ext2_commit_chunk2 (ex, state, page, inode)
    else
        ext2_commit_chunk2 (ex, state, page, inode)
