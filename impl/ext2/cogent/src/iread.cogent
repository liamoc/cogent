--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

-- if this fails, try (ExState, VfsInode) and return Success from caller
deserialise_Ext2Inode_2: (ExState, VfsInode, U32) -> RR (ExState) VfsInode (VfsInode take fs)
deserialise_Ext2Inode_2 (ex, inode, mode) =
    mode .&. s_IFMT
    | 0O100000 -> -- s_IFREG (regular file)
        let inode = vfs_inode_set_ops (inode, ext2_reg_inode_ops)
        and inode = vfs_inode_set_fileops (inode, ext2_reg_file_ops)

        and inode = vfs_inode_unlock_new (inode)
        in (ex, Success inode)
    | 0O040000 -> -- s_IFDIR (directory)
        let inode = vfs_inode_set_ops (inode, ext2_dir_inode_ops)
        and inode = vfs_inode_set_fileops (inode, ext2_dir_file_ops)

        and inode = vfs_inode_unlock_new (inode)
        in (ex, Success inode)
    | 0O120000 -> -- s_IFLNK (symbolic link)
        let inode = vfs_inode_unlock_new (inode)
        in (ex, Success inode)
    | _ ->
        let first_ptr = wordarray_get [U32] (inode.fs.block_pointers, 0) !inode
        and second_ptr = wordarray_get [U32] (inode.fs.block_pointers, 1) !inode

        and inode = if first_ptr /= 0 then 
                    vfs_inode_link_device (inode, mode, vfs_create_device (linux_decode_device_old (u32_to_u16 first_ptr))) else
                    vfs_inode_link_device (inode, mode, vfs_create_device (linux_decode_device_new second_ptr))

        and inode = vfs_inode_unlock_new inode
        in (ex, Success inode)

deserialise_Ext2Inode: (ExState, VfsInode take fs, OSBuffer!, U32) -> RR (ExState) VfsInode (VfsInode take fs)
deserialise_Ext2Inode (ex, inode_t, buf, idx) =
    let block_pointers_size = const_numBlockPointers
    in wordarray_create_nz[U32] (ex, block_pointers_size)
    | Success (ex, block_pointers) ->
        osbuffer_deserialise_Ple16 (buf, idx)
        | Success (mode, idx) ->
            osbuffer_deserialise_Ple16 (buf, idx)
            | Success (uid_low, idx) ->
                osbuffer_deserialise_Ple32 (buf, idx)
                | Success (size, idx) ->
                    osbuffer_deserialise_Ple32 (buf, idx)
                    | Success (access_time, idx) ->
                        osbuffer_deserialise_Ple32 (buf, idx)
                        | Success (creation_time, idx) ->
                            osbuffer_deserialise_Ple32 (buf, idx)
                            | Success (modified_time, idx) ->
                                osbuffer_deserialise_Ple32 (buf, idx)
                                | Success (deletion_time, idx) ->
                                    osbuffer_deserialise_Ple16 (buf, idx)
                                    | Success (gid_low, idx) ->
                                        osbuffer_deserialise_Ple16 (buf, idx)
                                        | Success (link_count, idx) ->
                                            osbuffer_deserialise_Ple32 (buf, idx)
                                            | Success (num_physical_blocks, idx) ->
                                                osbuffer_deserialise_Ple32 (buf, idx)
                                                | Success (flags, idx) ->
                                                    -- there is a padding U32 before this, hence + 4
                                                    let ((block_pointers, idx), res) = wordarray_map[U32, U32, OSBuffer!, ()] (#{
                                                        arr = block_pointers,
                                                        frm = 0,
                                                        to = block_pointers_size,
                                                        f = osbuffer_deserialise_Ple32_WordArray,
                                                        acc = (idx + 4),
                                                        obsv = buf})
                                                    in res
                                                    | Iterate () ->
                                                        -- other fields we don't care about right now

                                                        -- fill out abstract type
                                                        let mem_inode = #{
                                                            block_pointers,
                                                            dir_start_lookup = 0,
                                                            dtime = deletion_time
                                                        }

                                                        and inode = inode_t { fs = mem_inode }

                                                        and u32_mode = upcast mode

                                                        and inode = vfs_inode_set_mode   (inode, u32_mode)
                                                        and inode = vfs_inode_set_nlink  (inode, upcast link_count)
                                                        and inode = vfs_inode_set_size   (inode, upcast size)
                                                        and inode = vfs_inode_set_atime  (inode, #{tv_sec = access_time, tv_nsec = 0})
                                                        and inode = vfs_inode_set_mtime  (inode, #{tv_sec = modified_time, tv_nsec = 0})
                                                        and inode = vfs_inode_set_ctime  (inode, #{tv_sec = creation_time, tv_nsec = 0})
                                                        and inode = vfs_inode_set_uid    (inode, upcast uid_low)
                                                        and inode = vfs_inode_set_gid    (inode, upcast gid_low)
                                                        and inode = vfs_inode_set_flags  (inode, flags)
                                                        and inode = vfs_inode_set_blocks (inode, upcast num_physical_blocks)
                                                        --and (ex, inode_t) = fs_inode_set_generation (#{ex, inode = inode_t, val = generation})

                                                        in deserialise_Ext2Inode_2 (ex, inode, u32_mode)
                                                    | Break () ->
                                                        let ex = wordarray_free [U32] (ex, block_pointers)
                                                        in (ex, Error inode_t)
                                                | Error () ->
                                                    let ex = wordarray_free [U32] (ex, block_pointers)
                                                    in (ex, Error inode_t)
                                            | Error () ->
                                                let ex = wordarray_free [U32] (ex, block_pointers)
                                                in (ex, Error inode_t)
                                        | Error () ->
                                            let ex = wordarray_free [U32] (ex, block_pointers)
                                            in (ex, Error inode_t)
                                    | Error () ->
                                        let ex = wordarray_free [U32] (ex, block_pointers)
                                        in (ex, Error inode_t)
                                | Error () ->
                                    let ex = wordarray_free [U32] (ex, block_pointers)
                                    in (ex, Error inode_t)
                            | Error () -> 
                                let ex = wordarray_free [U32] (ex, block_pointers)
                                in (ex, Error inode_t)
                        | Error () -> 
                            let ex = wordarray_free [U32] (ex, block_pointers)
                            in (ex, Error inode_t)
                    | Error () ->
                        let ex = wordarray_free [U32] (ex, block_pointers)
                        in (ex, Error inode_t)
                | Error () -> 
                    let ex = wordarray_free [U32] (ex, block_pointers)
                    in (ex, Error inode_t)
            | Error () ->
                let ex = wordarray_free [U32] (ex, block_pointers)
                in (ex, Error inode_t)
        | Error () ->
            let ex = wordarray_free [U32] (ex, block_pointers)
            in (ex, Error inode_t)
    | Error (ex) ->
        (ex, Error inode_t)

-- TODO: reorder deser/inode_get so we don't deserialise if we already have a whole inode
deserialise_Inode: (ExState, OSBuffer!, U32, U32) -> RR (ExState) (VfsInode) ()
deserialise_Inode (ex, buf, offset, num) =
    let _ = _cogent_log (dbg_EXT2_INODE_READ, ("deserialise_Inode: deserialising inode "))
    and _ = _cogent_log_u32 (dbg_EXT2_INODE_READ, (num))
    and _ = _cogent_log (dbg_EXT2_INODE_READ, (" @ offset "))
    and _ = _cogent_log_u32 (dbg_EXT2_INODE_READ, (offset))
    and _ = _cogent_log (dbg_EXT2_INODE_READ, ("\n"))

    and (ex, res) = vfs_inode_get (ex, num)
    in res
    | Existing inode ->
        let _ = _cogent_log (dbg_EXT2_INODE_READ, "deserialise_Inode: got exisiting inode from icache, using that\n")
        in ((ex), Success inode)
    | New inode_t ->
        let (ex, res) = deserialise_Ext2Inode (ex, inode_t, buf, offset)
        in res
        | Success inode =>
            let _ = dump_inode (inode) !inode
            in (ex, Success inode)
        | Error inode_t ->
            let ex = vfs_inode_bad_taken #{ex, inode = inode_t}
            in (ex, Error ())       
    | None () ->
        let _ = _cogent_warn "deserialise_Inode: VFS gave us no inode (no memory?)"
        in (ex, Error ()) -- eNoMem


get_block_group_from_ino: (U32, VfsIno) -> U32
get_block_group_from_ino (inodes_per_group, inode_num) = (inode_num - 1) / inodes_per_group

get_block_group_from_ino2: (FsState!, VfsIno) -> U32
get_block_group_from_ino2 (state, inode_num) = get_block_group_from_ino (state.super.inodes_per_group, inode_num)

ino_block_addr_buffer_offset_from_inotable: (FsState!, U32, U32) -> (U32, U32)
ino_block_addr_buffer_offset_from_inotable (state, inode_table, ino) =
    -- inode is at "offset" within the blockgroup's inode_table
    let offset = (((ino - 1) % state.super.inodes_per_group) * const_sizeof_Inode)
    and block_offset = (offset >> const_blockSizeBits)
    and buffer_offset = offset .&. (const_blockSize - 1)

    and block_addr = inode_table + block_offset
    in (block_addr, buffer_offset)

ext2_inode_get_buf: (ExState, FsState, U32) -> RR (ExState, FsState) (OSBuffer, U32) U32
ext2_inode_get_buf (ex, state, inode_num) =
    if inode_num == 2 || inode_num >= 11 then
        let block_group_num = get_block_group_from_ino2 (state, inode_num) !state
        and ((ex, state), gd) = group_desc_from_block_group (ex, state, block_group_num)
        in gd
        | Success group_desc ->
            let (block_addr, buffer_offset) = ino_block_addr_buffer_offset_from_inotable (state, group_desc.inode_table, inode_num) !state

            -- and group_desc_t { .. } = group_desc
            -- and ex = free_Ext2GroupDescriptor (ex, group_desc_t)
            and _ = _cogent_log (dbg_EXT2_INODE_READ, "ext2_inode_get_buf: inode ")
            and _ = _cogent_log_u32 (dbg_EXT2_INODE_READ, inode_num)
            and _ = _cogent_log (dbg_EXT2_INODE_READ, " is part of block group ")
            and _ = _cogent_log_u32 (dbg_EXT2_INODE_READ, block_group_num)
            and _ = _cogent_log (dbg_EXT2_INODE_READ, "\n")
            and (ex, res) = ext2_get_block (ex, block_addr)
            in res
            | Success buf_block ->
                let _ = _cogent_log (dbg_EXT2_INODE_READ, "ext2_inode_get_buf: located at block ")
                and _ = _cogent_log_u32 (dbg_EXT2_INODE_READ, block_addr)
                and _ = _cogent_log (dbg_EXT2_INODE_READ, ", offset ")
                and _ = _cogent_log_u32_hex (dbg_EXT2_INODE_READ, buffer_offset)
                and _ = _cogent_log (dbg_EXT2_INODE_READ, "\n")
                in ((ex, state), Success (buf_block, buffer_offset))
            | Error () ->
                let _ = _cogent_log (dbg_EXT2_INODE_READ, "ext2_inode_get_buf: couldn't get block ")
                and _ = _cogent_log_u32 (dbg_EXT2_INODE_READ, block_addr)
                and _ = _cogent_log (dbg_EXT2_INODE_READ, "\n")
                in ((ex, state), Error eIO)
        | Error () ->
            let _ = _cogent_warn "ext2_inode_get_buf: couldn't get group descriptor\n"
            and _ = _cogent_warn_u32 block_group_num
            and _ = _cogent_warn "\n"

            in ((ex, state), Error eIO)
    else
        ((ex, state), Error eNoEnt)     -- reserved inode numbers

ext2_inode_get: (ExState, FsState, U32) -> RR (ExState, FsState) (VfsInode) (U32)
ext2_inode_get (ex, state, inode_num) = 
    let ((ex, state), res) = ext2_inode_get_buf (ex, state, inode_num)
    in res
    | Success (buf_block, buffer_offset) ->
        -- pick out the inode info from our offset in the table
        let ((ex), res) = deserialise_Inode (ex, buf_block, buffer_offset, inode_num) !buf_block
        in res
        | Success inode ->
            let ex = osbuffer_destroy (ex, buf_block)
            in ((ex, state), Success inode)
        | Error () ->
            let ex = osbuffer_destroy (ex, buf_block)
            and _ = _cogent_log (dbg_EXT2_INODE_READ, "ext2_inode_get: failed to deserialise inode\n")
            in ((ex, state), Error eIO) -- FIXME: bad error code?
    | Error (err) ->
        let _ = _cogent_log (dbg_EXT2_INODE_READ, "ext2_inode_get: could not get buf for inode\n")
        in ((ex, state), Error err)

fsop_get_root_inode: #{ex: ExState, state: FsState} -> RR #{ex: ExState, state: FsState} VfsInode U32
fsop_get_root_inode #{ex, state} =
    let ((ex, state), res) = ext2_inode_get (ex, state, 2)
    in (#{ex, state}, res)

ext2_inode_is_fast_symlink: VfsInode! -> Bool
ext2_inode_is_fast_symlink inode =
    ((vfs_inode_get_mode inode .&. s_IFMT) == vfs_type_link) && (vfs_inode_get_size inode <= 15)

-- inode_get_block lives in iwrite.cogent

