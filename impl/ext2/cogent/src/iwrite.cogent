--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

serialise_ext2_VfsInode: (ExState, FsState!, OSBuffer, VfsInode!, U32, Bool) -> RR (ExState) (OSBuffer, U32) (OSBuffer, U32)
serialise_ext2_VfsInode (ex, state, buf, inode, idx, sync) =
    let uid = vfs_inode_get_uid (inode)
    and gid = vfs_inode_get_gid (inode)
    and mode_u32 = vfs_inode_get_mode (inode)
    in osbuffer_serialise_Ple16 (buf, idx, u32_to_u16 (mode_u32))
    | Success (buf, idx) ->
        osbuffer_serialise_Ple16 (buf, idx, cogent_low_16_bits (uid))
        | Success (buf, idx) ->
            -- downcast, we use FIXME: should! set the size_high field for i_size >> 32
            -- and check if we're more than u32 then update superblock to have RO_COMPAT_LARGE_FILE
            osbuffer_serialise_Ple32 (buf, idx, u64_to_u32 (vfs_inode_get_size (inode)))
            | Success (buf, idx) ->
                let atime = vfs_inode_get_atime (inode)
                in osbuffer_serialise_Ple32 (buf, idx, atime.tv_sec)
                | Success (buf, idx) ->
                    let ctime = vfs_inode_get_ctime (inode)
                    in osbuffer_serialise_Ple32 (buf, idx, ctime.tv_sec)
                    | Success (buf, idx) ->
                        let mtime = vfs_inode_get_mtime (inode)
                        in osbuffer_serialise_Ple32 (buf, idx, mtime.tv_sec)
                        | Success (buf, idx) ->
                            osbuffer_serialise_Ple32 (buf, idx, inode.fs.dtime)
                            | Success (buf, idx) ->
                                osbuffer_serialise_Ple16 (buf, idx, cogent_low_16_bits (gid))
                                | Success (buf, idx) ->
                                    -- FIXME: ensure we check this somewhere else!
                                    osbuffer_serialise_Ple16 (buf, idx, u32_to_u16 (vfs_inode_get_nlink(inode)))
                                    | Success (buf, idx) ->
                                        -- FIXME: same deal here -- the system can support large files, but right now
                                        -- we don't on disk
                                        osbuffer_serialise_Ple32 (buf, idx, u64_to_u32 (vfs_inode_get_blocks (inode)))
                                        | Success (buf, idx) ->
                                            osbuffer_serialise_Ple32 (buf, idx, vfs_inode_get_flags (inode))
                                            | Success (buf, idx) ->
                                                -- there is a padding U32 before this, hence + 4
                                                let idx = idx + 4

                                                -- check if we're encoding a device
                                                in if vmode_is_chr mode_u32 || vmode_is_blk mode_u32 then
                                                    let dev = vfs_inode_get_device inode
                                                    in if linux_valid_old_dev dev then
                                                        osbuffer_serialise_Ple32 (buf, idx, upcast (linux_encode_device_old dev))
                                                        | Success (buf, idx) ->
                                                            osbuffer_serialise_Ple32 (buf, idx, 0)
                                                            | Success (buf, idx) ->
                                                                (ex, Success (buf, idx))
                                                            | Error buf -> (ex, Error (buf, idx))
                                                        | Error buf -> (ex, Error (buf, idx))
                                                    else
                                                        osbuffer_serialise_Ple32 (buf, idx, 0)
                                                        | Success (buf, idx) ->
                                                            osbuffer_serialise_Ple32 (buf, idx, linux_encode_device_new (dev))
                                                            | Success (buf, idx) ->
                                                                osbuffer_serialise_Ple32 (buf, idx, 0)
                                                                | Success (buf, idx) ->
                                                                    (ex, Success (buf, idx))
                                                                | Error buf -> (ex, Error (buf, idx))
                                                            | Error buf -> (ex, Error (buf, idx))
                                                        | Error buf -> (ex, Error (buf, idx))
                                                else
                                                    let block_pointers_size = const_numBlockPointers
                                                    in wordarray_fold[U32, (OSBuffer, U32), (), (OSBuffer, U32)] (#{
                                                        arr = inode.fs.block_pointers,
                                                        frm = 0,
                                                        to = block_pointers_size,
                                                        f = osbuffer_serialise_Ple32_WordArray,
                                                        acc = (buf, idx),
                                                        obsv = ()})
                                                    | Iterate (buf, idx) -> (ex, Success (buf, idx))
                                                    | Break (buf, idx) -> (ex, Error (buf, idx))
                                            | Error (buf) -> 
                                                (ex, Error (buf, idx))
                                        | Error (buf) -> 
                                            (ex, Error (buf, idx))
                                    | Error (buf) -> 
                                        (ex, Error (buf, idx))
                                | Error (buf) -> 
                                    (ex, Error (buf, idx))
                            | Error (buf) -> 
                                (ex, Error (buf, idx))
                        | Error (buf) -> 
                            (ex, Error (buf, idx))
                    | Error (buf) -> 
                        (ex, Error (buf, idx))
                | Error (buf) -> 
                    (ex, Error (buf, idx))
            | Error (buf) -> 
                (ex, Error (buf, idx))
        | Error (buf) -> 
            (ex, Error (buf, idx))
    | Error (buf) -> 
        (ex, Error (buf, idx))

-- see ialloc:165
readahead_inode: (ExState, FsState, VfsInode!) -> (ExState, FsState)
readahead_inode (ex, state, inode) =
    let ino = vfs_inode_get_ino (inode)
    and block_group = get_block_group_from_ino2 (state, ino) !state
    and ((ex, state), res) = group_desc_from_block_group (ex, state, block_group)
    in res
    | Success gdp =>
        let (block_addr, buffer_offset) = ino_block_addr_buffer_offset_from_inotable (state, gdp.inode_table, ino) !state
        and ex = osbuffer_readahead (ex, block_addr)
        in (ex, state)
    | Error () ->
        (ex, state)

fsop_inode_write: #{ex: ExState, state: FsState, inode: VfsInode, sync: Bool} -> RR #{ex: ExState, state: FsState, inode: VfsInode} () (U32)
fsop_inode_write #{ex,state,inode,sync} = 
    let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_write: getting buffer for ino ")
    and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, (vfs_inode_get_ino (inode))) !inode
    and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")

    and ((ex, state), res) = ext2_inode_get_buf (ex, state, vfs_inode_get_ino (inode)) !inode
    in res
    | Success (buf, buf_offset) ->
        -- create an on-disk repr of the inode from VfsInode
        let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_write: success, serialising inode to disk\n")
        and (ex, result) = serialise_ext2_VfsInode (ex, state, buf, inode, buf_offset, sync) !inode !state
        in result
        | Success (buf, buf_offset) ->
            let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_write: serialise ok, dirtying, syncing and destroying\n")
            and (ex, buf) = osbuffer_dirty (ex, buf)
            and buf = if sync then osbuffer_sync_dirty (buf) else buf
            and ex = osbuffer_destroy (ex, buf)
            in (#{ex, state, inode}, Success ())
        | Error (buf, buf_offset)->
            let ex = osbuffer_destroy (ex, buf)
            and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "failed to serialise inode to buffer at offset ")
            and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, buf_offset)
            and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")
            in (#{ex, state, inode}, Error eIO)
    | Error err ->
        let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_write: ERROR: failed to get buffer for ino ")
        and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, (vfs_inode_get_ino (inode))) !inode
        and _ = _cogent_log (dbg_EXT2_INODE_WRITE, " with err ")
        and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, err)
        and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")

        in (#{ex, state, inode}, Error err)

-- frees inode (TODO: maybe put in fsop_inode_free?)
fsop_inode_evict2: (ExState, FsState, VfsInode) -> (ExState, FsState, VfsInode take fs) 
fsop_inode_evict2 (ex, state, inode) =
    let inode_t { fs } = inode
    and fs_t { block_pointers } = fs
    and ex = wordarray_free [U32] (ex, block_pointers)
    in (ex, state, inode_t)

fsop_inode_evict: (ExState, FsState, VfsInode, Bool) -> (ExState, FsState, VfsInode take fs)
fsop_inode_evict (ex, state, inode, want_delete) =
    if want_delete then
        -- set deletion time
        let (ex, now) = os_get_current_time ex

        and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_evict: wanted to delete inode\n")

        and inode_t { fs } = inode
        and fs = fs { dtime = now.tv_sec } !now
        and inode = inode_t { fs }

        and (ex, inode) = vfs_inode_mark_dirty (ex, inode)

        -- write it out now if we need to
        and is_sync = vfs_inode_is_sync (inode) || 
                      (vmode_is_dir (vfs_inode_get_mode (inode)) && vfs_inode_is_sync_dir (inode)) !inode

        and (r { ex, state, inode }, res) = fsop_inode_write #{ ex, state, inode, sync = is_sync }

        -- truncate it
        and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_evict: setting size to 0\n")
        and inode = vfs_inode_set_size (inode, 0)
        and block_count = vfs_inode_get_blocks (inode) !inode
        in if block_count /= 0 then
            let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_evict: had non-zero blockcount, truncating to 0...\n")

            and ((ex, state, inode), res) = ext2_truncate_blocks (ex, state, inode, 0) -- truncate to zero
            in fsop_inode_evict2 (ex, state, inode)
        else
            let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_evict: no need to truncate; had no block count\n")
            in fsop_inode_evict2 (ex, state, inode)
    else
        fsop_inode_evict2 (ex, state, inode)

fsop_inode_free2: (ExState, FsState, VfsInode take fs) -> (ExState, FsState, VfsInode take fs)
fsop_inode_free2 (ex, state, inode_t) = 
    -- FIXME: sync buffer if we're mounted sync

    -- update super's inode count
    let state_t { super, super_buf } = state
    and super_free_inode_count' = super.free_inode_count + 1 !super

    and super = super { free_inode_count = super_free_inode_count' }
    and (ex, super_buf) = super_set_free_inode_count (ex, super_buf, super_free_inode_count')

    and state = state_t { super, super_buf }

    -- we are done!
    in (ex, state, inode_t)

-- free the inode on disk
fsop_inode_free: (ExState, FsState, VfsInode take fs) -> (ExState, FsState, VfsInode take fs)
fsop_inode_free (ex, state, inode_t) = 
    let ino = vfs_inode_get_ino2 (inode_t) !inode_t
    and first_ino = 2 -- FIXME: when we have a bigger superblock
    and valid_inode = ino >= first_ino && ino < state.super.inode_count !state
    in valid_inode
    | True =>
        -- update block bitmap and mark as free
        let group = get_block_group_from_ino2 (state, ino) !state
        and bit = (ino - 1) % state.super.inodes_per_group !state

        and ((ex, state), res) = group_desc_and_buf_from_block_group (ex, state, group)
        in res
        | Success (group_desc, group_buf) =>
            -- get the block bitmap
            let (ex, res) = ext2_get_block (ex, group_desc.inode_bitmap) !group_desc
            in res
            | Success (bitmap_buf) =>
                -- clear it
                let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_free: clearing bit ")
                and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, bit)
                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, " of block group ")
                and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, group)
                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")
                
                and (bitmap_buf, res) = osbuffer_clear_bit (bitmap_buf, bit)
                in res
                | True =>
                    let (ex, bitmap_buf) = osbuffer_dirty (ex, bitmap_buf)
                    and ex = osbuffer_destroy (ex, bitmap_buf)
                    -- FIXME: sync buffer if we're mounted sync

                    -- okay, now update block group counters
                    and free_inode_count' = group_desc.free_inode_count + 1 !group_desc
                    and (ex, group_buf) = group_desc_set_free_inode_count (ex, group, group_buf, free_inode_count')

                    and was_dir = vmode_is_dir (vfs_inode_get_mode2 (inode_t)) !inode_t

                    in if was_dir then
                        let directory_count' = group_desc.directory_count - 1 !group_desc
                        and (ex, group_buf) = group_desc_set_directory_count (ex, group, group_buf, directory_count')

                        --and (ex, group_buf) = osbuffer_dirty (ex, group_buf) above dirties for us
                        and ((ex, state), _) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                        in fsop_inode_free2 (ex, state, inode_t)
                    else
                        let ((ex, state), _) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                        in fsop_inode_free2 (ex, state, inode_t)
                | _ ->
                    let _ = _cogent_warn "fsop_inode_free: ERROR: bit already cleared for ino "
                    and _ = _cogent_warn_u32 (vfs_inode_get_ino2 (inode_t)) !inode_t
                    and _ = _cogent_warn "\n"

                    and ex = osbuffer_destroy (ex, bitmap_buf)
                    and ((ex, state), _) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                    in (ex, state, inode_t)
            | Error () ->
                let _ = _cogent_warn "fsop_inode_free: ERROR: failed to get inode bitmap block "
                and _ = _cogent_warn_u32 group_desc.inode_bitmap !group_desc
                and _ = _cogent_warn "\n"

                and ((ex, state), _) = put_group_desc_buf_in_array (ex, state, group, group_buf)
                in (ex, state, inode_t)
        | Error () ->
            let _ = _cogent_warn "fsop_inode_free: ERROR: failed to get group descriptor "
            and _ = _cogent_warn_u32 group
            and _ = _cogent_warn "\n"
            in (ex, state, inode_t)
    | _ ->
        let _ = _cogent_warn "fsop_inode_free: ERROR: reserved/invalid ino "
        and _ = _cogent_warn_u32 ino
        and _ = _cogent_warn "\n"

        in (ex, state, inode_t)

-- ext2/inode.c#L766: ext2_get_block
-- we don't destroy the buffer here. caller does this
fsop_inode_get_block: (#{ex: ExState, state: FsState, inode: VfsInode, blk: U32, create: Bool, buf: OSBuffer}) 
                   -> RR (ExState, FsState, OSBuffer, VfsInode) () (U32)
fsop_inode_get_block #{ ex, state, inode, blk, create, buf } =
  let max_mappable = osbuffer_get_size buf >> const_blockSizeBits !buf
  and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: getting path from blk ")
  and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, blk)
  and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")

  and ((ex, state), res) = path_new_from_block (ex, state, blk)
  in res
  | Success path =>
    let depth = path.depth !path
    and boundary = path.boundary !path
    in depth
    | 0 ->
      -- out of bounds blk
      let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: block out of bounds (depth == 0)\n")
      and (ex, state) = path_restore (ex, state, path)
      in ((ex, state, buf, inode), Error eIO)
    | _ => 
      -- lookup the branch
      let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: had a branch, going to look it up...\n")

      -- setup chain first
      and (state, res) = chain_init (state, path)
      in res
      | Success chain =>
        let ((ex, chain), res) = chain_from_path (ex, chain, inode, depth) !inode
        in res
        | Success maybe_partial =>
          -- see if we had a full or partial chain
          maybe_partial
          | None () ->
            let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: was full chain (all blocks allocated)\n")

            -- all blocks allocated already, just read the last one into our source buffer
            and ((ex, buf), res) = osbuffer_read_block #{ ex, buf, blk = chain_peek_indirect_blockptr chain } !chain
            and (ex, chain, contiguous) = chain_count_contiguous (ex, chain, inode, max_mappable, boundary) !inode

            -- free the chain, now we're done
            and (ex, state, path) = chain_restore (ex, state, chain)
            and (ex, state) = path_restore (ex, state, path)

            in res
            | Success () =>
              let buf = if contiguous > boundary then osbuffer_boundary buf else buf
              and buf = osbuffer_set_size (buf, contiguous << const_blockSizeBits)

              in ((ex, state, buf, inode), Success ())
            | Error () -> ((ex, state, buf, inode), Error eIO)  -- failed to read final block back
          | Some partial_idx ->
            -- had partial chain
            let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: had partial chain (some blocks unallocated)\n")
            in if create then
              let (chain, maybe_indirect) = chain_take_indirect (chain, partial_idx)
              in maybe_indirect
              | Some indirect =>
                let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: searching for a goal to target block...\n")

                and goal = ext2_find_goal (state, inode, blk, indirect) !inode !state !indirect
                and (ex, chain) = chain_put_indirect (ex, chain, indirect, partial_idx)

                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: found goal block ")
                and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, goal)
                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")

                -- allocate branch
                and unallocated_in_chain = chain.path.depth - partial_idx !chain

                -- number of allocations for indirect
                and indirect_blocks = unallocated_in_chain - 1 -- was: (chain [ptr* to start] + depth) - partial - 1

                -- number of direct blocks
                and count = chain_blocks_to_allocate (chain, indirect_blocks, upcast max_mappable, boundary) !chain

                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: have ")
                and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, unallocated_in_chain)
                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, " unallocated in chain, ")
                and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, indirect_blocks)
                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, " indirect blocks, and ")
                and _ = _cogent_log_u64 (dbg_EXT2_INODE_WRITE, count)
                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, " direct blocks\n")

                and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: going to allocate...\n")

                -- XXX: bad cast for count! in reality we never exceed U16 bounds (I think)
                and ((ex, state, chain, inode), res) = chain_alloc (ex, state, chain, inode, indirect_blocks, goal, u64_to_u32 count, partial_idx)
                in res
                | Success count =>
                  let (chain, maybe_indirect) = chain_take_indirect (chain, partial_idx)
                  in maybe_indirect
                  | Some indirect =>
                    -- splice it
                    let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: splicing newly allocated top-level indirect to existing chain...\n")

                    and ((ex, indirect, inode), res) = indirect_splice (ex, indirect, inode, blk, count, indirect_blocks)
                    and (ex, chain) = chain_put_indirect (ex, chain, indirect, partial_idx)
                    in res
                    | Success () =>
                      let indirect_blockptr = chain_peek_indirect_blockptr (chain) !chain
                      
                      -- set buffer to be new
                      and (ex, buf) = osbuffer_set_new (ex, buf)

                      and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: looking up new, final block ")
                      and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, indirect_blockptr)
                      and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")

                      and ((ex, buf), res) = osbuffer_read_block #{ ex, buf, blk = indirect_blockptr } 

                      -- free the chain, now we're done
                      and (ex, state, path) = chain_restore (ex, state, chain)
                      and (ex, state) = path_restore (ex, state, path)

                      in res
                      | Success () =>
                        let buf = if count > boundary then osbuffer_boundary (buf) else buf
                        and buf = osbuffer_set_size (buf, count << const_blockSizeBits)

                        -- finished!
                        in ((ex, state, buf, inode), Success ())
                      | Error () ->
                        let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: failed to read back last blockptr ")
                        and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, indirect_blockptr)
                        and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")

                        in ((ex, state, buf, inode), Error eIO) -- failed to read final block back
                    | Error e ->
                      let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: failed to push indirect on chain?\n")
                      and (ex, state, path) = chain_restore (ex, state, chain)
                      and (ex, state) = path_restore (ex, state, path)
                      in ((ex, state, buf, inode), Error e)
                  | None () -> 
                    let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: had no indirect after alloc?\n")
                    and (ex, state, path) = chain_restore (ex, state, chain)
                    and (ex, state) = path_restore (ex, state, path)
                    in ((ex, state, buf, inode), Error eIO)
                | Error e ->
                  let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: failed to allocate blocks for chain, with error ")
                  and _ = _cogent_log_u32 (dbg_EXT2_INODE_WRITE, e)
                  and _ = _cogent_log (dbg_EXT2_INODE_WRITE, "\n")

                  and (ex, state, path) = chain_restore (ex, state, chain)
                  and (ex, state) = path_restore (ex, state, path)
                  in ((ex, state, buf, inode), Error e)
              | None () ->
                let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: had no indirect?\n")
                and (ex, state, path) = chain_restore (ex, state, chain)
                and (ex, state) = path_restore (ex, state, path)
                in ((ex, state, buf, inode), Error eIO) -- allocation failed
            else
              let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: unallocated block, but not opened with create flag\n")
              and (ex, state, path) = chain_restore (ex, state, chain)
              and (ex, state) = path_restore (ex, state, path)
              in ((ex, state, buf, inode), Error 0) -- no such block, and not permitted to create
        | Error () ->
          let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: failed to get chain from path\n")
          and (ex, state, path) = chain_restore (ex, state, chain)
          and (ex, state) = path_restore (ex, state, path)
          
          in ((ex, state, buf, inode), Error eIO) -- FIXME: true error code should be passed up
      | Error path ->
        let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: failed to get chain prereqs from state\n")
        and (ex, state) = path_restore (ex, state, path)
        in ((ex, state, buf, inode), Error eIO) -- FIXME: true error code should be passed up
  | Error () ->
    let _ = _cogent_log (dbg_EXT2_INODE_WRITE, "fsop_inode_get_block: ERROR: could not create path from block\n")
    in ((ex, state, buf, inode), Error eNoMem)

fsop_inode_truncate: (ExState, FsState, VfsInode, U64) -> (ExState, FsState, VfsInode)
fsop_inode_truncate (ex, state, inode, size) =
    let (res, _) = ext2_truncate_blocks2 (ex, state, inode, size)
    in res
