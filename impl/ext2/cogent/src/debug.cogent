--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

_get_mode_type_str: U32 -> ()
_get_mode_type_str mode = 
   _cogent_log (dbg_EXT2_INODE,  (mode .&. s_IFMT)
    | 0O140000 -> "socket"
    | 0O120000 -> "symlink"
    | 0O100000 -> "regular"
    | 0O010000 -> "FIFO"
    | 0O060000 -> "block special"
    | 0O040000 -> "directory"
    | 0O020000 -> "character special"
    | _ -> "bad type")

print_val: WordArrayFoldF U32 U32 () ()
print_val #{elem, acc = idx, obsv} = 
  let _ = _cogent_log (dbg_EXT2_INODE, "(")
  and _ = _cogent_log_u32 (dbg_EXT2_INODE, idx)
  and _ = _cogent_log (dbg_EXT2_INODE, "):")
  and _ = _cogent_log_u32 (dbg_EXT2_INODE, elem)
  and _ = _cogent_log (dbg_EXT2_INODE, ", ")
  in Iterate (idx + 1)

dump_buffer: OSPageBuffer! -> ()

dump_inode: VfsInode! -> ()
dump_inode inode =
  let _ = _cogent_log (dbg_EXT2_INODE, "Inode: ")
  and _ = _cogent_log_u32 (dbg_EXT2_INODE, vfs_inode_get_ino (inode))
  and _ = _cogent_log (dbg_EXT2_INODE, "\tType: ")
  and mode = vfs_inode_get_mode (inode)
  and _ = _get_mode_type_str mode
  and _ = _cogent_log (dbg_EXT2_INODE, "\tMode: ")
  and _ = _cogent_log_u32_oct (dbg_EXT2_INODE, mode .&. 0O777)
  and _ = _cogent_log (dbg_EXT2_INODE, "\tFlags: ")
  and _ = _cogent_log_u32 (dbg_EXT2_INODE, vfs_inode_get_flags inode)
  and _ = _cogent_log (dbg_EXT2_INODE, "\n")

  -- skip gen/ver line

  and _ = _cogent_log (dbg_EXT2_INODE, "User:\t")
  and _ = _cogent_log_u32 (dbg_EXT2_INODE, vfs_inode_get_uid inode)
  and _ = _cogent_log (dbg_EXT2_INODE, " Group:\t")
  and _ = _cogent_log_u32 (dbg_EXT2_INODE, vfs_inode_get_uid inode)
  and _ = _cogent_log (dbg_EXT2_INODE, " Size:\t")
  and _ = _cogent_log_u64 (dbg_EXT2_INODE, vfs_inode_get_size inode)
  and _ = _cogent_log (dbg_EXT2_INODE, "\n")

  -- skip acl line
  and _ = _cogent_log (dbg_EXT2_INODE, "Links: ")
  and _ = _cogent_log_u32 (dbg_EXT2_INODE, vfs_inode_get_nlink inode)
  and _ = _cogent_log (dbg_EXT2_INODE, " Blockcount: ")
  and _ = _cogent_log_u64 (dbg_EXT2_INODE, vfs_inode_get_blocks inode)
  and _ = _cogent_log (dbg_EXT2_INODE, "\n")

  -- skip fraggment, time lines
  -- TODO: replace with wordarray_fold
  and _ = _cogent_log (dbg_EXT2_INODE, "BLOCKS:\n")
  and _ = wordarray_fold[U32, U32, (), ()] #{
    arr  = inode.fs.block_pointers,
    frm  = 0,
    to   = wordarray_length[U32] inode.fs.block_pointers, 
    f    = print_val,
    acc  = 0,
    obsv = ()
  }

  in _cogent_log (dbg_EXT2_INODE, "\n")


plvl : U32
plvl = 0xffffffff

print_chain : Chain! -> ()
print_chain c =
  let _ = _cogent_log (plvl, "====================\n")
  and _ = _cogent_log (plvl, "Printing a Chain\n")
  and _ = _cogent_log (plvl, "====================\n")
  and _ = print_chain_path c.path
  and _ = print_chain_indirects c.indirects
  and _ = _cogent_log (plvl, "indirect_count = ")
  and _ = _cogent_log_u32 (plvl, c.indirect_count)
  and _ = _cogent_log (plvl, "\n")
   in ()

print_chain_path : Path! -> ()
print_chain_path p = 
  let _ = _cogent_log (plvl, "--------------------\n")
  and _ = _cogent_log (plvl, "Path\n")
  and _ = _cogent_log (plvl, "--------------------\n")
  and _ = print_path_offsets p.offsets
  and _ = _cogent_log (plvl, "depth = ")
  and _ = _cogent_log_u32 (plvl, p.depth)
  and _ = _cogent_log (plvl, "\nboundary = ")
  and _ = _cogent_log_u32 (plvl, p.boundary)
  and _ = _cogent_log (plvl, "\n")
   in ()

print_chain_indirects : (Array Indirect)! -> ()
print_chain_indirects arr = array_fold_no_break[Indirect, (), ()] #{
                                arr = arr
                              , f = print_chain_indirect_f
                              , acc = ()
                              , obsv = ()
                              }

print_chain_indirect_f : #{elem : Indirect!, acc : (), obsv : ()} -> ()
print_chain_indirect_f r {elem} = print_chain_indirect elem

print_chain_indirect : Indirect! -> ()
print_chain_indirect i = 
  let _ = _cogent_log (plvl, "--------------------\n")
  and _ = _cogent_log (plvl, "Indirect\n")
  and _ = _cogent_log (plvl, "--------------------\n")
  and _ = _cogent_log (plvl, "block ptr = ")
  and _ = _cogent_log_u32 (plvl, i.blockptr)
  and _ = _cogent_log (plvl, "\nbuf: ")
  and _ = i.buf | None () -> _cogent_log (plvl, "None")
                | Some _  -> _cogent_log (plvl, "Some")
  and _ = _cogent_log (plvl, "\noffset = ")
  and _ = _cogent_log_u32 (plvl, i.offset)
  and _ = _cogent_log (plvl, "\n")
   in ()

print_path_offsets : (WordArray BlockOffset)! -> ()
print_path_offsets warr = wordarray_fold_no_break[BlockOffset, (), ()] #{
                              arr = warr
                            , frm = 0
                            , to = 0xffffffff  -- HACK: max of U32
                            , f = print_path_offset_f
                            , acc = ()
                            , obsv = ()
                            }

print_path_offset_f : ElemAO BlockOffset () () -> ()
print_path_offset_f r {elem} = 
  let _ = _cogent_log (plvl, "offset = ")
  and _ = _cogent_log_u32 (plvl, elem)
  and _ = _cogent_log (plvl, "\n")
   in ()

