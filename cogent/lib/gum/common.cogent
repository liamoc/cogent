--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

type Option a = <None|Some a>

type LoopResult a b = <Iterate a|Break b>
type LRR acc brk = (acc, <Iterate|Break brk>)

type R a b = <Success a|Error b>
type Result a b = R a b

success : all (a, b). a -> R a b
success a = Success a

error : all (a, b). b -> R a b
error b = Error b

type RR c a b = (c, <Success a|Error b>)

type ErrCode = U32
type WordArrayIndex = U32
type ExState

type ElemA a acc = #{elem: a, acc: acc}
type ElemB a rbrk = #{elem:a, rbrk:rbrk}
type ElemAO a acc obsv = #{elem:a, acc:acc, obsv:obsv!}
type OptElemA a acc = #{oelem: Option a, acc: acc}
type OptElemAO a acc obsv = #{oelem: Option a, acc: acc, obsv: obsv!}
type ArrA a acc = #{arr: a, acc: acc}
type ArrB a rbrk = #{arr:a, rbrk:rbrk}

type FreeF a = (ExState, a) -> ExState
type FreeAccF a acc obsv = (ExState, a, acc, obsv!) -> (ExState, acc)

-- This will disapear when generating C code
-- It is just a way to indicate what code path should
-- never be taken to help reason about FS code.

_cogent_assert: Bool -> ()
_cogent_assert2: (String, Bool) -> ()

type Seq32_simple_bodyParam acc = acc

type Seq32_simple_body acc = Seq32_simple_bodyParam acc -> acc
type Seq32SimpleParam acc = #{
  frm: U32,
  to: U32,  -- to is not inclusive. ie we loop over [from, to) incrementing `step'
  step: U32,
  f: Seq32_simple_body acc,
  acc: acc
}

{-# cinline seq32_simple #-}
{-# fnmacro seq32_simple #-}
seq32_simple: all (acc).  Seq32SimpleParam acc -> acc

-- seq32 begin end increment loop_body accumulators obvservables
type Seq32_bodyParam acc obsv rbrk = #{
  acc: acc,
  obsv: obsv!,
  idx: U32
}
type Seq32_body acc obsv rbrk = Seq32_bodyParam acc obsv rbrk -> LRR acc rbrk
type Seq32Param acc obsv rbrk = #{
  frm: U32,
  to: U32,  -- to is not inclusive. ie we loop over [from, to) incrementing `step'
  step: U32,
  f: Seq32_body acc obsv rbrk,
  acc: acc,
  obsv: obsv!
}

{-# cinline seq32 #-}
{-# fnmacro seq32 #-}
seq32: all (acc,obsv,rbrk). Seq32Param acc obsv rbrk -> LRR acc rbrk

{-# cinline seq32_rev #-}
{-# fnmacro seq32_rev #-}
seq32_rev: all (acc,obsv,rbrk). Seq32Param acc obsv rbrk -> LRR acc rbrk

type Seq32_stepParam = U32 -> U32

type Seq32StepFParam acc obsv rbrk = #{
  frm: U32,
  to: U32,  -- to is not inclusive. ie we loop over [from, to) incrementing `step'
  stepf: Seq32_stepParam,
  f: Seq32_body acc obsv rbrk,
  acc: acc,
  obsv: obsv!
}

{-# cinline seq32_stepf #-}
{-# fnmacro seq32_stepf #-}
seq32_stepf: all (acc,obsv,rbrk). Seq32StepFParam acc obsv rbrk -> LRR acc rbrk

-- seq64 begin end increment loop_body accumulators obvservables
type Seq64_bodyParam acc obsv rbrk = #{
  acc: acc,
  obsv: obsv!,
  idx: U64
}
type Seq64_body acc obsv rbrk = Seq64_bodyParam acc obsv rbrk -> LRR acc rbrk
type Seq64Param acc obsv rbrk = #{
  frm: U64,
  to: U64,
  step: U64,
  f: Seq64_body acc obsv rbrk,
  acc: acc,
  obsv: obsv!
}

{-# cinline seq64 #-}
{-# fnmacro seq64 #-}
seq64: all (acc,obsv,rbrk). Seq64Param acc obsv rbrk -> LRR acc rbrk

word64Max : U64
word64Max = 0xffffffffffffffff

word32Max : U32
word32Max = 0xffffffff

-- align32 (a,b): align a to b, NOTE b must be a power of 2
align32 : (U32, U32) -> U32
align32 (x,powof2) =
  (x + (powof2 - 1)) .&. complement(powof2 - 1)

align64 : (U64, U64) -> U64
align64 (x,powof2) =
  (x + (powof2 - 1)) .&. complement(powof2 - 1)

{-# cinline min_u32 #-}
{-# inline min_u32 #-}
min_u32: (U32, U32) -> (U32)
min_u32 (a, b) = if a < b then a else b

{-# cinline min_u64 #-}
{-# inline min_u64 #-}
min_u64: (U64, U64) -> (U64)
min_u64 (a, b) = if a < b then a else b

{-# cinline in_range_u32 #-}
{-# inline in_range_u32 #-}
in_range_u32: (U32, U32, U32) -> Bool
in_range_u32 (needle, from, to) =
  if needle >= from && needle < to then True else False

_cogent_warn: String -> ()
_cogent_warn_u64: U64 -> ()
_cogent_warn_u32: U32 -> ()
_cogent_warn_u16: U16 -> ()

_cogent_debug: String -> ()
_cogent_debug_u64: U64 -> ()
_cogent_debug_u64_hex: U64 -> ()
_cogent_debug_u32: U32 -> ()
_cogent_debug_u32_hex: U32 -> ()
_cogent_debug_u32_oct: U32 -> ()

_cogent_debug_u16: U16 -> ()
_cogent_debug_u16 x = _cogent_debug_u32 (upcast x)

_cogent_debug_u8: U8 -> ()
_cogent_debug_u8 x = _cogent_debug_u32 (upcast x)

_cogent_debug_bool: Bool -> ()
_cogent_debug_bool bool = if bool then _cogent_debug "true" else _cogent_debug "false"

{-# cinline cogent_log2 #-}
{-# fnmacro cogent_log2 #-}

cogent_log2: U32 -> U32

{-# cinline random_u32 #-}
random_u32: () -> U32

{-# cinline safe_add32 #-}
safe_add32: (U32,U32) -> R U32 ()
-- Addition that checks for overflow and returns
-- an error.
safe_add32(a, b) =
  let r = a + b
  in if r < a || r < b
       then Error else Success r

{-# cinline safe_sub32 #-}
safe_sub32: (U32,U32) -> R U32 ()
safe_sub32(a, b) =
  let r = a - b
  in if r > a then Error else Success r

{-# cinline safe_sub64 #-}
safe_sub64: (U64,U64) -> R U64 ()
safe_sub64(a, b) =
  let r = a - b
  in if r > a then Error else Success r

{-# cinline safe_add64 #-}
safe_add64: (U64,U64) -> R U64 ()
safe_add64 (a, b) =
  let r = a + b
  in if r < a || r < b
       then Error else Success r

{-# cinline u16_to_u8 #-}
u16_to_u8: U16 -> U8
{-# cinline u32_to_u8 #-}
u32_to_u8: U32 -> U8
{-# cinline u32_to_u16 #-}
u32_to_u16: U32 -> U16
{-# cinline u64_to_u32 #-}
u64_to_u32: U64 -> U32
{-# cinline u64_to_u16 #-}
u64_to_u16: U64 -> U16

{-# cinline cogent_low_16_bits #-}
cogent_low_16_bits: U32 -> U16
cogent_low_16_bits x = u32_to_u16 (x .&. 0xFFFF)

{-# cinline cogent_high_16_bits #-}
cogent_high_16_bits: U32 -> U16
cogent_high_16_bits x = u32_to_u16 ((x .&. 0xFFFF0000) >> 16)
